Introduction to the matplotlib and Seaborn libraries
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] In this lecture, we'll explore two of Python's most powerful visualization libraries, Matplotlib and Seaborn. While both are highly capable, they have distinct features and use cases. Seaborn stands out for its simplicity and its elegance. It requires less complex syntax and offers beautifully designed default themes, making it ideal for creating sophisticated visualizations with very little effort. On the other hand, Matplotlib excels at customizability. It allows for extensive visual modifications through direct axis to its classes. It suffers greater control if you need to fine tune every aspect of your charts and plots. In this module, I'm going to give you an overview of how to effectively utilize both libraries for your data visualization needs. Matplotlib and Seaborn are versatile libraries for creating a wide range of standard chart graphics. They're useful for visualizing all types and kinds of data. This, of course, includes but isn't limited to financial data, operational data, employee data, engagement and behavioral data. One thing to note, however, is that you can display network data using standard chart graphics, but you cannot create network graphs when you're working with only the Matplotlib or Seaborn library. Matplotlib is typically employed for generating basic plots. Its visualization capabilities commonly include creating bar charts, line charts, scatter plots, and similar straightforward graphical representations. Conversely, Seaborn offers an extensive array of visualization options. It's known for its beautiful themes, and Seaborn allows for the plotting of complex graphics with relatively minimal coding effort. It specializes in statistical visualizations, making it ideal for summarizing and displaying distributions within datasets. Now let's look at how we can utilize both Matplotlib and Seaborn to create various types of graphics. Okay, in this coding demonstration, I just want to show you how to get started really quickly with Matplotlib and the Seaborn library. So we're first going to start by installing the required libraries. So for that, we'll need to do a pip install. And we will pip install Matplotlib, and run this. And we'll also need to do a pip install of the Seaborn library. Okay, so we've got all of those installed. Now we need to import them into our IPython environment. So we'll do that now by just saying import matplotlib.pyplot as plt, and import seaborn as sns. And then for this demonstration, we also need to work with DataFrames. So we'll say from pandas import DataFrame. Okay, so then we'll run this. Okay, now we have imported both, all of the libraries that we need here. So let's get started looking at how we can use them to generate plots. I will go ahead and just create a dataset that we can use for practicing our data visualization. So we'll just call it data. And then let's create a dataset with the names of individuals along with their age, gender, and rank. This is a dataset that we actually defined in an earlier lecture, so I won't spend too much time typing everything out. The names here should be steve, john, richard, sarah, and julie. So we'll pass these strings into the list. And then, we will define the age of each of these people. So create a column named age, and we'll set the ages equal to, 20, 22, 20, 21, 24, 23, and 22. And it looks like we forgot a bracket. So let's close that. And then create the next column, which is going to be gender. We'll say gender, and set that equal to Male, Male, Male, Female, Male, Male, and Female. And then the next column we need is rank. We'll create a rank column and then we will assign a rank to each of these people. And that is 2, 1, 4, 5, 3, 7, 6. So now we have a dataset that we can work with. Let's create a DataFrame from this dataset. To do that, we just use the DataFrame constructor and pass in data, and we'll set this equal to df, and then let's just print it out. Okay, it looks like we have a syntax error, which should be pretty easy to fix. The string just was not closed here for gender. Run this again. Okay, so here is now our DataFrame. And let's use this to create a Matplotlib bar chart. And we'll just start by creating a simple bar chart. To do that, we will use the bar function. And in the function, we'll pass the DataFrame's names column as the first parameter, and then we'll pass in the DataFrame's age column as a second parameter. So let's get started with that. We'll say plt.bar, and then of the df DataFrame, we want to select names. And then we also want to select the age column from the DataFrame. So we'll say df, and then we'll select here, age. The values of the first parameter will be shown across the X-axis, and then the values of the second parameter will be shown across the Y-axis. So let's go ahead and set some labels for both of these axes. In order to do that, you would use the xlabel function, and so that looks like plt.xlabel. And yeah, so along the X-axis we're going to have Names. And so we'll just create a label here for that axis. And then for the Y-axis ylabel, we're going to have Age. So this is going to be shown along the Y-axis. And let's also create a title for this plot. To do that, we would say plt.title, called the title function, and then pass in a string for the title of the plot. Let's call it Comparing Ages. And then let's print the plot out. To do that, you use the show function. So plt.show, and run this. And okay, great. So now we actually have a bar chart that shows the ages of each of the people in our DataFrame. Now let's create a similar bar graph using Seaborn. And to do that, we'll call Seaborn's bar plot function. In the bar plot function, we'll just pass the DataFrame and specify the columns we want to show on the X and Y-axis. So let's test that out real quick. We'll say plot, we'll say plot is equal to sns.barplot. And then we will say that our data is equal to the DataFrame function here. Our x value is equal to the names column. So we're selecting the names column for the X-axis. And the Y-axis, we will select the age column. And then let's create a title for this plot. To do that, we use the set_title function. So this is plot.set_title. And again, we'll just call it Comparing Ages. Now to plot out this graph, we would just say plt.show, and run that. And here you can see we have similar object, but now it's a Seaborn bar graph. And as you can see, there are small differences between the Matplotlib one and the Seaborn one, because this name's variable and this age variable have different casing than above, but in general, they look pretty darn similar. The key difference here though, is you can see with the method we're creating the bar chart using Matplotlib, it just requires more code to generate the same graph. So it's pretty much always the case that Seaborn is more efficient at data visualization than Matplotlib. And in general, it's more beautiful. It comes up with graphs that are more beautiful, although in this example we aren't seeing a huge difference. Later on in the course, you will start to see the differences between Seaborn and Matplotlib in terms of aesthetic. Drawing all sorts of other types of graphs with Matplotlib and Seaborn are also pretty straightforward. So let's go ahead and create a line plot with Matplotlib. To create a line plot with Matplotlib, you just use the plot function, so that's plt.plot. And then let's pass in the DataFrame, and let's put out again the names and age of the people in this DataFrame. So put name. And then for our Y-axis, let's select the age column here. And we can name the label names the same as the bar chart here. So we can actually just copy these labels, paste them down here. And then to take a look at it, we would just say, plt.show, and run this. And okay, so here we have the ages of our people plotted out in line chart format. Let's also look at how we can create a line plot using Seaborn. So again, this is going to be a lot more simple. We'll create an object called plot, and we'll say that it's equal to the DataFrame. We need to call the line plot function. So that's sns.lineplot, and we'll pass in our df DataFrame as our data here. And then again, we will just take X and Y-axis. We can just copy and paste these from above. So that's all the same as the bar chart. And then to plot this out, we'll say plt.show. Okay. And we'll run this. And as you can see, it looks pretty much exactly like the line plot we created with Matplotlib, which makes sense since it's exactly the same dataset, but it's just again, a lot more efficient to use this method to create a line chart than it is to create a line chart in Matplotlib. Let's really quickly look at how to create a pie chart in Matplotlib and in Seaborn. So for Matplotlib, we need to use the pie function. It will say plt.pie. And then let's plot out the age column. So we'll select that from our DataFrame here, and we'll add some labels. To do that, we create a labels parameter and we set it equal to the names column. So we'll select df, names column here. And then let's create a title for the chart. So to do that, we use the title function, we pass in a title that says Age Comparison, and then we can print this out. I have a typo here where it should be title, so I'll fix that. And then, okay, so here's our Matplotlib pie chart. Now, Seaborn doesn't have a default function to create pie charts, but we can use the syntax in Matplotlib to create a pie chart and then add the Seaborn color palette. Let me show you how to do that real quick. So we'll create a variable say, colors, and then we we'll call the color_palette function. So that's sns.color_palette. Let's take a look and get the pastel color palette. And then say if we only want five colors, we can just slice the color palette from zero to five. And then what that will do is it will just extract the color palette list, and the colors that are associated with position 0, 1, 2, 3, and 4. And then now we have a color palette set up. So let's call the pie function, which is plt.pie, and we'll pass in our DataFrame and select the age column. And then let's set our labels equal to the names column. So to do that, we say labels is equal to df, and select names here. And then lastly, we'll define the colors equal to the colors palette that we just created in the line of code above. And then we can run that. So I just ran this without using the show function. And then that's actually what you get, is you get all of this extra information about the plot that you don't necessarily want or need to see. So just to clean this up, I'm going to say plt.show and run it again. And here now we have a Seaborn chart. So we have a pie chart that we actually used Matplotlib to help build. And we've then applied the color palette from Seaborn to this pie chart. And those are the basics of just how to get started using Matplotlib and Seaborn libraries.


he video “Introduction to the matplotlib and Seaborn libraries” covers two of Python's most popular libraries for data visualization, which is a key skill in data science and machine learning. Here's a breakdown to help you understand better:

Matplotlib is like the Swiss Army knife of visualization libraries. It's highly customizable, allowing you to tweak almost every aspect of your plots and charts. Think of it as having a toolbox where you can adjust each tool according to your specific needs. This library is great for creating basic visualizations like bar charts, line charts, and scatter plots.

Seaborn, on the other hand, is like having a set of pre-designed, stylish templates for your data visualization needs. It's built on top of Matplotlib and makes creating sophisticated visualizations easier with less code. Seaborn is particularly good for statistical graphics and works well when you want to visualize complex data distributions with minimal effort.


The video also walks you through installing these libraries and starting with basic plots. For example, creating a dataset and then using Matplotlib to make a bar chart, or Seaborn for a similar plot but with less code and more aesthetic appeal.

For someone in your field looking to pivot into a Machine Learning Engineer role, mastering these libraries is invaluable. They enable you to quickly visualize and understand data, which is crucial for building and tuning machine learning models. The ability to effectively communicate results through visualizations is also key in collaborating with stakeholders.

Remember, the choice between Matplotlib and Seaborn often comes down to the specific needs of your project and your personal preference for customization versus convenience.




Why is understanding time series visualization crucial for the role of a data analyst?
-It enables reliable demand forecasting.

Why are statistical plots crucial in data analysis?
-to detect outliers and understand variable relations

Irane wants to create sophisticated visualizations with minimal effort. Which library should she use?
-Seaborn, for its simplicity and elegant default themes


Noah is an e-commerce analyst who wants to convey site usability insights using various charts. Which chart type should he use to visualize the total number of items purchased per day?
-a line chart


What is the purpose of setting axes limits and tick marks in a plot?
-to make it easier for viewers to interpret the plot

How does adding labels and annotations enhance plot comprehension?
-It adds context and meaning.