Creating standard data graphics
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Standard chart graphics are excellent tools for conveying simple data insights in a way that anyone can understand. For example, imagine you are an E-commerce business analyst for a company that just made some major changes to its website layout. You are visualizing the site usability insights that you've discovered to convey findings to your manager. To do this, you use a line chart, a bar chart, and a pie chart. You use a line chart to show how the total number of items purchased per day has increased since the change. You'll use the bar chart to show how the number of purchases increased for customers in the 18 to 25-year-old category, but that it decreased for customers in the greater than 44-year-old category. Lastly, you use a pie chart to show what categories of products generate the greatest proportion of sales and how the site changes affected that proportion, both before and after. To summarize, you'd use a line chart to show the changes over time, you'd use a bar chart to show changes in categorical data, and you'd use a pie chart to visualize categorical data as a proportion of a whole. Now, we have two methods for plot building, a functional method and an object-oriented method. In the demonstration we're about to do, I'm going to show you how to build plots using the functional method. With the functional method, you build plots by calling the plotting function on a variable or set of variables. With object-oriented plotting, you build a plot by first generating a blank figure object and then populating that object with plot and plot elements. We'll be doing that in later demonstrations. In the coding demonstration to come, I'm going to show you the most popular data visualization libraries in Python, which are, of course, Matplotlib and Seaborn. In this demonstration, I'm going to show you how to use Matplotlib. Let's get started. So here we have our Jupyter Notebook, and I'm giving you the mtcars dataset preloaded here with the column names and everything prepared for you, just so we don't have to type that out again. But first things first, let's go ahead and import our libraries, and in this demonstration, we're going to use NumPy. So we'll import numpy as np. We're also going to be generating random numbers in this demonstration, so within NumPy, we need to import randn. So let's say from numpy.random, import randn, and then we always of course need to import pandas, and we'll import that as pd. And then let's bring in our series and data frame. So we'll import Series and DataFrame, and we're going to be using Matplotlib in this demonstration so we'll import matplotlib.pyplot as plt, and from matplotlib, let's also import the rcParams. Great, and so now let's just run this and we'll have our libraries ready for us. Now, the first thing we're going to work on here is that we're going to create some line charts, so the first line chart, let's just generate two variables, an x and a y variable, and x will be equal to a range of values between one and nine. So we'll say x equal to range one through 10, and y is equal to a list, and it's just going to be a list of numbers, one, two, three, four, zero, four, three, two, one. To generate the line plot, what we need to do is call the plot function, so that's plt.plot, and then let's just pass in the x and y, and run this. Okay, so we have our line chart, and that's pretty straightforward. Now let's work on creating a line chart from a Pandas object. We've already got your data loaded and ready to go inside of the Jupyter environment, but we need to go ahead and isolate a variable. So let's isolate the mpg variable, which we're doing here, mpg, and we're setting it equal to the cars data frame, and we've selected the mpg column out of that data frame. So the first thing I want to do is just run this, and then we have our mtcars dataset available to us in here. And now, let's just plot out the mpg variable, so to do that, we'll do mpg.plot, and we'll run this. Here we go, we have a line chart that shows the values within the mpg variable. Now, I want to show you how to actually plot out three variables in a chart. So to do that, let's create a data frame called df, say df is equal to cars, and then let's select the variables we want to plot and let's make those, let's make those cyl, weight, and mpg. And then to plot it out, we just call the plot method off of the DataFrame object and run this. Oh, it looks like I need to actually add another set of brackets here. And I'll run it again. Okay, cool, so now we have a line chart with three variables plotted out instead of just one and we've got a nice little legend here so that we can make sense of which variable is which. Now, let's look at how to create bar charts. To create a bar chart, you would just call the bar function, so that's plt.bar. And then let's pass in our x and y variable and run this, and it's easy as that. We've got a bar chart. Let me show you how to create a bar chart with a Pandas object. To do that, you would just call the plot function, so let's plot out our mpg variable as a bar chart. To do that, we will say mpg.plot, and then we'll pass a parameter that says kind is equal to bar, and run this. And now we have our mpg variable plotted out as a bar chart. If you wanted to plot this horizontally instead of vertically, all you would need to do is use the same command, but the parameter would instead be kind equal to barh, and then you would get a horizontal bar chart, so let me show you that real quick. I'll just copy this code, and add a H here for this. Now we have a horizontal bar chart, and that is easy-peasy. The last thing I want to show you in this demonstration is how to create pie charts and actually print them out. So for this example, let's create a new variable x, and let's say that x is just a list with the values one, two, three, four, and 0.5. 'Kay. And then if we wanted to create a pie chart from this, we would just call the py function, plt.py, and pass in our variable x, and then to print it out, we would call the show function, which is plt.show, run this. And okay, now we have a very, very simple pie chart. But what I really wanted to do in this demonstration was actually to show you how to save this pie chart as an image file. So to do that, first, let's generate the pie chart again. So we'll say plt.py, and then we'll pass in our x variable. And then to save this as an image file, we actually need to use the savefig function, so that's plt.savefig, and we'll pass in a string with the file name, and we'll call that pie_chart.png, and then we can just plot this out using the show function here, and great, okay, so that's still the same pie chart, but what this has actually done with the savefig function is it's saved this pie chart as an image. So you can see that here in our Notebooks folder, down at the bottom, you'll see pie_chart.png, and here we go, we have the same image that is from our notebook that has been now printed within a separate image file.
Find in transcript


The “Creating standard data graphics” video offers several key insights into data visualization with Python, particularly focusing on using Matplotlib. Here are the main takeaways:

Understanding Chart Types: It emphasizes the importance of selecting the right type of chart (line, bar, pie) based on the data and the story you want to tell. For instance, line charts for trends over time, bar charts for categorical comparison, and pie charts for showing proportions.
Plot Building Methods: The video introduces two methods for creating plots - the functional method and the object-oriented method, highlighting the functional method for simplicity.
Practical Demonstration: It provides a hands-on demonstration on creating these charts using Matplotlib, including setting up your data and customizing your plots for clarity and impact.

These concepts are crucial for anyone looking to leverage Python for data analysis and visualization, especially in fields related to data science and machine learning.


The video “Creating standard data graphics” dives into how to visually represent data using Python's Matplotlib library, focusing on line charts, bar charts, and pie charts. These are foundational tools in data science for conveying insights clearly. Here's a breakdown:

Line Charts: Useful for showing trends over time. For example, tracking the increase in website visits after an update.
Bar Charts: Great for comparing quantities across different categories. They can highlight, for instance, the difference in product sales between age groups.
Pie Charts: Ideal for showing proportions or percentages, like the share of sales by product category.

The video also introduces two methods for creating plots: the functional method, where you directly call plotting functions, and the object-oriented method, which offers more flexibility by creating figure objects and then populating them with data and plot elements.

Given your interest in pivoting to a Machine Learning Engineer role, understanding how to create and interpret these charts is crucial. They are often used to visualize data distributions, feature relationships, and the performance of machine learning models, helping to derive insights and make data-driven decisions.




