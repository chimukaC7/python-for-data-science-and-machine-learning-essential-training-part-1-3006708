Visualizing time series
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Time series plots convey how an attribute changes over time. Using statistical methods like autoaggressive integrated moving average, you can reliably predict or forecast the demand of a particular retail product based on historical time series on previous sales of that product. Before forecasting your time series, you need to know how to handle and plot time series in Python. Working with time series in Python can get really tricky, but Pandas makes it simple. Before showing you how to use time series in Pandas, let me just show you what a time series looks like. These four plots all show time series, the first one is a constant time series. Basically, you're not seeing any trends or changes in the variable over time. Trended time series is like this chart over here in the upper right, that's where you see a net increase or decrease in the time series variable over time. In the lower left you'll see an untrended time series. This is an untrended seasonal time series, so the variable is increasing and decreasing according to the seasons of the year, but you're not seeing a net change in the average value of the time series. So we call that untrended. In contrast, over in the lower right corner, you'll see a trended seasonal time series. This is where the variable increases and decreases with the season, but there's a net gain in the variable over time. So like I said, Pandas makes it really easy to plot out time series and your Jupyter Notebook is coming all loaded with the libraries you need, which are NumPy, Pandas, and Matplotlib. We're also going to be using Seaborn here to just set the style. So I actually prefer to use the alias, sns here, let me update this. And we can just run this and we'll be ready to start creating time series. So we'll get right to work with just reading in our data and then printing it out as a time series. The first thing we need to do is set an address. So let's say address =, and then for this demonstration, I want to use the Superstore Sales data. So the location of that is over here in the data folder. Just Right Click, copy path, and then paste it into this string here. And then I'll close this. The next thing that we'll do is we'll create a data frame from the CSV file. And we need to read the CSV file in using the read CSV function. So let's just call this data frame df and we'll set it =pd.read_csv, and then we'll pass in the address. And then we also want to set our index. The index for the data frame should be set to the order date. So to do that we'll just say index_col, which is the parameter which is used to set the index. And let's set that = 'Order Date.' And we have to be sure also to encode the data properly. For this particular demonstration, we need to set our encoding here = cp1252. All we need to do is define the encoding parameter equal to a string, which reads cp1252. And let's also parse the dates. So we'll want to pass a parameter that says parse_dates=True. And then let's just look at the first five records by calling the head method off of the DF data frame. So we'll say df.head() and run this. And here we've got now a little preview of the data that is sitting inside of this Superstore Sales data set. And as you can see, it's been indexed here according to order date. Perfect, so now let's go ahead and create a time series plot from this. To do that, we're going to call the plot method and we'll just select the order quantity variable from the data frame. So we'll say df and then select order quantity here, and then call the plot method off of this and run it. And it printed out very quickly, but it's way too much data. We can't make any sense of this, right? So what I'm going to do is I'm just going to create a small sample of this data so that we can plot something out that we're able to actually decipher. So let's create a second data frame and we'll call it df2. And then we'll call the sample method in order to take a random sample of data points from the dataset. So we'll say df.sample(), and then let's take 100 data points. To do that, we need to define the n perimeter = 100. Now this function is going to be doing random sampling and I want you to get the same results on your machine that I get in here in this demonstration. So what we need to do is actually set the seed for that. So to do that, we'll say random_state and just set it equal to 25. And that will ensure that the points that are pulled in this demonstration are the same ones that are pulled on your machine when you're doing this at home or in the office. And then we also have to pass in a perimeter for the axis and we'll say axis=0. And let's also create some labels real quick. So plt.xlabel on the x-axis. Let's label that order date. And then let's create a y-label. Change out the string here, call that order quantity. And let's also call the title function, which is pt.title. And we'll just pass in a string for the title of the chart. So that's going to be Superstore Sales. And then let's just plot out this smaller data frame. So we're going to call the plot method. Let's select only the order quantity field. So we'll say df2. And then from that data frame, we want to select only the order quantity. And then off of this entire thing, we call the plot method. And I'm going to run this. Looks like there was a syntax error. I need to add a letter T here, run this again. Okay, cool. So this is a lot easier to read than the graph prior. And what we're seeing along the x-axis is really the dates that the orders were made and the quantity of orders that happened on those dates. So this was a really quick and easy way to use Python to generate a time series. In the next section, I'm going to show you how to create statistical data graphs.


Time series data is essentially a sequence of data points collected or recorded at regular time intervals. This type of data is prevalent in various fields, including economics, finance, environmental studies, and more, making it a crucial aspect of data science and machine learning projects.

Types of Time Series Data:

Constant Time Series: The data points remain constant over time, showing no trend or seasonal variations.
Trended Time Series: Here, you observe a consistent upward or downward trend in the data over time.
Untrended Seasonal Time Series: The data fluctuates in a predictable pattern based on seasons but doesn't show a long-term trend.
Trended Seasonal Time Series: This combines both a trend and seasonal variations, meaning the data shows seasonal patterns along with a general trend over time.

Visualizing Time Series in Python:

Pandas: It simplifies handling time series data, allowing you to easily manipulate and analyze the data. In the video, the instructor demonstrates using Pandas to index data by date, which is a common practice for time series analysis.
Matplotlib and Seaborn: These libraries are used for plotting in Python. Matplotlib provides the basic functionality for creating a wide range of plots, including time series plots. Seaborn, which builds on Matplotlib, offers more visually appealing plotting options and is used to set the style of the plots.

Practical Steps:

The video walks through reading in a dataset (e.g., Superstore Sales data), setting the index to a date column for time series analysis, and then plotting the data. Initially, plotting the entire dataset might not be helpful due to the volume of data. Hence, sampling a subset of the data for visualization is demonstrated, which is a useful technique for making sense of large datasets.

Key Takeaway:
Visualizing time series data effectively can reveal underlying patterns, trends, and seasonal variations that might not be apparent from raw data alone. This is particularly useful in forecasting, where understanding past trends and patterns can help predict future ones.

Given your background and interest in transitioning to machine learning, mastering time series visualization is a valuable skill. It lays the groundwork for more advanced analyses, such as forecasting and anomaly detection in time series data.