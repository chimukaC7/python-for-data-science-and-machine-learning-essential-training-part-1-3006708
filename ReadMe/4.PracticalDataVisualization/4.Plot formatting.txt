Plot formatting
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] In this section, I'm going to show you how to define custom plot colors, line styles, and marker styles. The reason I think this is important to show you is that enhancing chart colors and markers can help you convey a point in a way that is visually easier to understand. Just think, if all the slices of a pie chart had the same color, the chart would be meaningless. And if all the lines in a line chart were the same color and use the same markers, you wouldn't be able to decipher one from the other, and the chart would have very little or no meaning. Matplotlib offers colors, line styles, and marker style options to help you build clarity into your data visualization. Matplotlib has unlimited color options, so you can set the color parameter equal to the name of your color you want, or you can set the color parameter equal to RGB or RGBA color codes for even more customization. Matplotlib also has a variety of line styles. If you look at this chart here, you can see some of the codes that you would use to set those styles. Also, I'm going to show you how to do this in the coding demonstration. Matplotlib also has a lot of different options in terms of marker styles. I created this handy-dandy little chart for you to review in case you want to get fancy with your charts, you can look it over, but I'm also going to show you how to use these markers in Python in just a second. You've already learned to generate your plots, so let's go ahead and start working on customizing them. So for this coding demonstration, the Jupyter Notebook is already coming preloaded with the libraries you need, which are NumPy, Pandas, and Matplotlib. And also, I've gone ahead and set the parameters in terms of the plot size. We discussed that in an earlier lecture. So all of this information is preloaded for you, and we're going to start off by working to define plot color. We'll just run these. So the first thing we need to do is just to create some variables, and we'll create an X variable and a Y variable. We'll set X equal to a series of numbers between one and nine. To do that, we'll call the range function and we'll pass in, starting number one and number 10, where the last number is excluded in the output. So that will generate a series of numbers from one to nine, and then we'll define Y as the numbers one, two, three, four, zero point five, four, three, two, one. Okay, so we have two variables, and now let's just plot this out as a bar chart. So to do that, we'll say plt.bar, and we'll pass in our two variables, X and Y, and run this. Okay, so now we have a nice little bar chart. Now let's define some colors here. Let's change things up a bit, because the default colors are kind of boring, and we could create something a lot more fun. So we'll change the width of the bars and we'll also change the color. How about that? We can also go ahead and change the alignment a bit. So first things first, let's create a list to define the width of our bars. To do that, we'll just create a variable name, we'll call it wide, and we'll say wide is equal to a kind of just a mix and match of some sizes here. So zero point five, zero point five, zero point five, and then maybe we'll make a bar that's zero point nine wide, another one that's zero point nine wide, another one that's zero point nine wide, and then we'll go back to bars of width zero point five. So I'll just kind of paste these in here. Okay, cool. So there we have some widths that Python is going to use to adjust our default bar chart. So we'll use the color label here and we'll say, "Color is equal to," and then we'll create a list, and we'll pass on a string that reads, "Salmon." Now, to plot this bar chart out, we again need to use our bar function, so that's plt.bar. And then we want to pass in the X variable, the Y variable, and then we wanted to find the width, color, and alignment parameters. So to do that, we'll say width, and we'll set width equal to wide, which is the variable we just created. We'll set color equal to color, and then we'll say that we want to align the bar in the center, so we'll say align equal to center here. Now the color is going to be equal to color, which we just defined a sum in, and then we set the alignment to center. And alignment refers to where the bars actually plot out within the chart, so we want them to be centered when they plot. So we have set the line parameter equal to center, and so now all we need to do here is print this out. Okay, so, cool. You can see we have made these outer bars, and they're a lot more narrow than the ones in the center, and the color has been changed to salmon, and you can also see that the alignment of the bars is centered between each of the intervals instead of kind of being pushed inwards. Looking at the difference between the two, you can see that, yeah, it's definitely made a difference. So we've got that there. And now let's go ahead and start working with some data frame objects. The Jupyter Notebook is coming preloaded with the NumPy cars data set. Of course, you are going to need to customize your address and specify where that data set is stored on your computer, but I've named all the columns and everything, so the next thing you'd want to do is just to create a data frame. I'm going to run this. And we will call the data frame DF, and we'll set it equal to cars, and then let's just go ahead and select the cylinder column, the MPG column, and the weight column, and then plot it out with the plot method, so df.plot, and we'll run this. Okay, so now we have here a little line chart, and that looks decent, but these are just the standard settings that you would get with Matplotlib. And I want to play with these a little bit, so we'll change the color scheme, we'll create a new variable called color theme. So let's do that now, color underscore theme, let's add an "equal to," and then we'll create a list of colors we want to use in the chart. So we'll say dark gray, light salmon, need to change this to a single quote, and then the last color will be powder blue. Okay, and then we'll go ahead and call the plot method off of the data frame, and we'll pass in the color theme. To do that, we say df.plot, and then we set the color parameter equal to our color underscore theme, and run this. And now you can see we have shifted the colors into these sort of more fancy-looking colors. I also want to show you how to change colors based on our GP codes. So we will create a Z variable and we'll set Z equal to a list, and it'll have the numbers one, two, three, four, and zero point five. And now we want to call the pie function and we'll pass in our Z object. So that's plt.pie. And then, we'll go ahead and say plt.show, print it out, and there we have a pie chart, but it's coming with our default colors for Matplotlib. So let's go ahead and adjust these colors using our GP codes instead of the color labels we have been using. So we'll create a new color theme. And we can just overwrite the previous one, so we'll say "color theme equal to," and then we'll create a list. And this time, instead of passing in the color labels, we're going to pass in our RGB codes. So our first RGB code will be #A9A9A9. And then I'm going to paste in the next four. These are just RGB codes to represent what the color should look like when it gets plotted into the pie chart. Now we've got those. And now all we need to do is call the pie function. So that's plt.pie, and we'll pass in Z. And then our color, we'll set our color parameter equal to color theme, and then plot it out for the plt.show. There is a typo here, so this should be colors. And as you can see, we have now adjusted the colors out a little bit so that there's just a bit more creativity than the standard Matplotlib printout. Now let's look at how to customize line styles. So the first thing we would do is just to create two new variables. We'll call them X1 and Y1. And let's say X1 is basically the same variable that we created here, series of numbers between one and nine. So I'm just going to copy this. And then our Y1 variable will be a series of numbers between one and 10 in descending order, so I'll just create a list and write them in. Okay, so now let's just plot this thing out. The plt.plot. We'll pass in our X and Y. Let's also create a second plot. And we'll just plot the X1 and Y1 variables in that second plot. So just copy this, and add the numbers for the variable names that we just created, and run this. Okay, so it looks like we have a little bit of a typo because X and Y must have the same first dimension, so I messed up in my creating one of my variables here, and that would be this variable because we need to have nine numbers in X1 and nine numbers in Y1, so I wrote in one too many. So let's run this, and yeah, okay, great. So here we have now two lines in the plot, and that's exactly what we wanted,



Imagine you're drawing a picture with markers. You have different colors, you can draw lines in various styles (dotted, dashed, solid), and you can mark points with different shapes (circles, squares, stars). In the “Plot formatting” video, it's like learning how to use these markers to make your drawing clearer and more interesting.

Colors: Just as you choose different marker colors to make parts of your drawing stand out, you can change the colors of the lines or bars in a chart to make it easier to understand and more visually appealing.

Line Styles: Think about using a dashed line to show a path on a treasure map versus a solid line to outline the treasure chest. In charts, changing the style of lines helps differentiate between different sets of data or trends.

Marker Styles: If you're marking spots on a map where you found interesting things, you might use different symbols for each type of find. Similarly, in a chart, using different shapes (markers) for data points can help show different categories or values at a glance.


The video shows how to do this with coding in Python, using a library called Matplotlib. It's like having a digital art kit that lets you customize your charts (or drawings) to make them more informative and engaging.