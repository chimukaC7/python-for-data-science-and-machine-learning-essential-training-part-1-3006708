Creating statistical data graphics in Seaborn
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Statistical plots allow viewers to identify outliers, visualize distributions, deduce variable types, and discover relationships and core relations between variables in a dataset. In this course, I'm going to show you how to use statistical plots to visually detect outliers, deduce variable distribution and type, and uncover relationships and core relations between variables. Now, histograms are very simple plots that are used to show variable distribution. Scatter plots, on the other hand, are used to show relationships between variables. Scatter plot matrices show core relations between variables and box plots show variable spread and are useful for outlier detection. Let me show you how to create these in Python. So your Jupyter Notebook is coming loaded with the libraries that you will need, or at least most of them. So we have our standard libraries, which are num, pi, pandas, matplotlib and seaborn. I've also gone ahead here and set the plotting parameters for matplotlib. In this demonstration, we're actually going to be working with seaborn, and I showed you how to import that in earlier demonstrations. A nice thing about seaborn is that it provides you options for style sets and there are a lot of different options. So what I did is I set a seaborn style equal to whitegrid. There are many different options, but I like the whitegrid option, so we'll use that. And yeah, I'm just going to run all of this to have it imported into our IPython environment. And then let's get started with creating statistical data graphics. The first thing we're going to do in this demonstration is just to start eyeballing dataset distributions with histograms. And this Jupyter Notebook is coming loaded with the data that you should need, although you'll want to change this file extension for the file extension at your setup. So you would just go over here to the Explorer and then go to the data folder and right-click. In this demonstration, we're going to be using the empty cars dataset. So then you will just right-click here, get the empty car dataset, and then change out the string for the address. And for this demonstration, let's just set the index for the data frame equal to the car names column in the cars data frame. And I've already preloaded this into your notebook so you don't have to type all of this out again, because this is very similar to prior demonstrations. So what I want to do here first is just isolate the mpg variable. So we'll say mpg variable is equal to cars. And then we'll use the indexer to select the mpg column here. And to plot it out, we'll call the plot method off of the mpg variable, so mpg.plot, and since we are creating a histogram, we need to set that perimeter inside of the plot method. To do that, we're going to say kind=, and then create a string that reads hist and that will instruct Python to create a histogram. And then we run this, and as you can see, we have a nice little histogram that shows the distribution of data in our mpg variable. Another way to create a histogram would be to just call the hist function and then pass in the mpg variable. Let me show you how to do that, plt.hist and then pass in mpg and then call the plot function, plt.plot, and run this. And now we have just a different way of creating a histogram inside of Python. Now let me show you how to create a histogram using seaborn. To do that, you would use the disc plot function, so that's going to be snsdisplot. And then we need to pass in the mpg variable. And this is one of the two ways I want to show you how to do it. This is the simplest way of creating a histogram using seaborn. So I'm going to run this. And there you can see we have a nice, kind of more beautiful, more styled plot that was actually created more simply using the seaborn method. Now let me show you another way to use seaborn to create scatter plots. Basically, I messed up with our script. So I said something about how I'm going to show two different ways to do this, but that wasn't proper. That wasn't correct. So let's just actually start over again from the part where we're going to create this from scratch just 'cause it's super simple. So now let me show you how to use seaborn to create a histogram. To do that, you would use the displot rephrase. To do that, you would use the displot function, so that would be sns.dissplot, and then pass in the mpg variable and run this. And as you can see, you know, we've got a nice styled histogram here that was extremely simple to create, and that's the basics of how to create a histogram using seaborn. I'm going to show you two different ways of doing this, and the first one is just via the plot method. So we'll call plot off of our cars data frame, and then we'll pass in a parameter to say what kind of plot we want. So we'll say kind is equal to scatter. And then we want to set our variables. So X should be equal to hp and then let's set our Y variable equal to mpg. And let's also go ahead and set a color for this plot. To do that, we can just say C is equal to, and then we'll select the color dark gray by writing a string that reads dark gray. And lastly, let's set a size for each of our dots in our scatterplot. So to do that, we would say S is equal to 150. And I'm just checking this over for any obvious syntax errors. Okay, and then run this. And there we go, we have a nice scatter plot. But I also want to show you how to create a scatter plot using seaborn. So with seaborne, you just use the reg plot function, which it's going to be sns.regplot, and you pass in the variables that you want plotted out for the X and Y axis. So for X, we will say x should be equal to the hp variable, and then y should be equal to the mpg variable. And then we also need to define where we're actually pulling this data from. So for that, we would need to create a perimeter that says data and then set the equal to cars, our cars data frame. And then to make sure that this comes out as a scatterplot, we need to say scatter equal to true. And this just tells seaborne yes, create a scatterplot. And then when we run this, we see seaborn's version of the very same scatterplot. As you can see, it's a lot more detailed and helpful than the generic version we created with the simple plot method above. Moving on, I want to show you how to use seaborn to generate a scatter plot matrix. And this is actually really, really easy. So you would just call the pair plot function. So this is going to be sns.pairplot and we pass in our data frame cars and then run this. And of course this is awesome, but it's also a lot of information to take in at a glance. So what I think we should do is let's just create a subset and then we'll plot that out instead. We'll call it car subset. So we'll say cars_subset, and we'll set that equal to cars. And then we'll use the indexer to select the variables we want here. Let's make those mpg, disp, hp and wt. And then again, we will use our pairplot function. So sns.pairplot, and we'll pass in this time our car subset. And then to generate the plot, we just need to say plt.show, run this. Ah, okay, so this is a bit easier to read, but the nice thing about having a scatterplot is at a glance, you can really get an idea about the type of relationship that is occurring between the variables. And also you can see things like possible outliers. Like this point right here is possibly an outlier or over here, this could be an outlier. And then you can also tell at a glance what type of variables you have. For example, these variables plotted here are all continuous variables, which you can tell by looking at the distribution of points that are plotted. So scatterplot matrices are just really nice to have to get a fast understanding of your variables and your variable pairs. Now let's look at how to build a box plot. We're going to use the box plot method to do this. So we're going to say cars.boxplot, and then we'll pass in the perimeter to say what we want plotted in our box plot. So our first box plot, let's just plot out a column mpg. So we'll say column equal to mpg. And then we want to plot the mpg variable against the automatic manual transmission variable. So to do that, we'll say by is equal to am for automatic and manual transmission variables. And then let's also just create a second block box plot. And this time we'll plot weight against transmission type. So we'll say cars.boxplot, and we'll say our first column should be weight. And then we want to plot this against or by the automatic manual transmission variable. So am here and then we run this. I would say it's a little cramped. I'm going to go up and just change this variable to make it a little taller. I'm going to say six inches, six inches tall for our chart here, just so we don't have any labels scrunched up. Okay, so this is better. And this is showing us how our data is distributed across mpg and automatic and manual transmission. So what it's saying here is that cars that get less miles per gallon tend to not have an automatic transmission. If they do have an automatic transmission, which is am equal to one, then they tend to get more miles per gallon.


In the video “Creating statistical data graphics in Seaborn,” you'll find several key takeaways that are crucial for your journey into data science and machine learning:

Histograms and Scatter Plots: The video demonstrates how to create histograms to visualize variable distributions and scatter plots to show relationships between variables. These are foundational for understanding data characteristics.

Seaborn's Simplicity: It emphasizes the ease of using Seaborn for creating more aesthetically pleasing and informative statistical plots compared to other libraries, with minimal code required.

Plot Types for Data Analysis: You'll learn about various plot types, including scatter plot matrices for understanding variable relationships and box plots for outlier detection. These tools are essential for exploratory data analysis, helping you to uncover insights from your data efficiently.


These concepts are not only pivotal for your goal of becoming a Machine Learning Engineer but also enhance your data visualization skills, making your analysis more effective and insightful.