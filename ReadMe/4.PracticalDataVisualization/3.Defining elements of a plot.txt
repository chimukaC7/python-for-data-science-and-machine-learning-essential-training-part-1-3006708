Defining elements of a plot
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Now you're going to learn about defining plot elements using Matplotlib. Plot elements add context to your plot so that the plot effectively conveys meaning to its viewers. You set axes limits to make sure that your chart is well fit to your data graphic, you set axes tick marks and plot grids to make it easier and faster for viewers to interpret your chart at a glance. You can use subplots to visually compare changes in data values under different conditions, like in different seasons, different locations, or in different years. There are two methods for building plots. You can use the Functional method or the Object-oriented method. Adding plot elements is an essential part of Object-oriented plotting. We discussed the functional plotting in the last demonstration. So now it's time to go over Object-oriented plotting. Again with Object-oriented plotting, you build a plot by first generating a blank figure object and then populating that object with plots and plot elements. There are four steps in Object-oriented plotting. First one is to create a blank figure object. Then second, you will add axes to the figure. Third, you'll generate a plot or plots within the figure object. And then fourth, you will specify plotting and layout parameters for the plots within your figure. One last thing I want to touch on here before we go into the demonstration is subplots. A Subplot is a plotting figure that contains more than one plot or subplots. It's easy to generate a subplot in Matplotlib with the subplots function. Let's look at how to define elements of a plot using Matplotlib. So this Jupyter notebook is coming preloaded with the libraries you'll need, which is NumPy, Pandas and Matplotlib. And I wanted just to start off this demonstration by showing you how to set the figure size and inline settings for your Matplotlib plots. So to make sure that your plots print out properly within Jupyter notebooks, you want to use the command matplotlib inline. What this does is it tells Python to print your Matplotlib plot in line with your Jupyter notebook. And then you'll also probably want to go ahead and do define a figure size. So to do that, you're going to use the rcParams function. Then create a list, and you want to define the figure and figure size. So you'll say fig.figsize. In manual, just set this equal to the dimensions you want for your plots. So in this demonstration, let's just print plots that are 5 inches wide and 4 inches tall. So we'll put 5, 4 here. And then we basically have set the parameters for generating plots within our Jupyter notebook. So we run this. Now let's go ahead and define axes, ticks and grids. To do that, we first need to generate some variables. So let's create an x variable here, and then we'll say that the x variable is a series of numbers between 1 and 9. So we'll use the range function and we'll pass in the starting value of 1, and then the end value is 10, where 10 is actually excluded from the numbers that are generated. And then another variable will be y and we'll set y equal to a list. The values in this list will be 1, 2, 3, 4, 0, 4, 3, 2, 1. Now let's generate a figure. So to do that, we will say fig is equal to plt.figure, we'll call the figure function here. And this is basically going to create a blank figure. The next thing we're going to do is that we're going to add axes to this figure. To do that, you call the add axes method off of this fig object. So we say fig.add_axes, axis. And this will be our ax object. So I'll set this whole thing equal to ax. And for our axes parameters, let's just pass a list that will contain the numbers we want. So that'll be 0.1, 0.1, 1, 1. And now let's plot this out. To plot it out, all we need to do is call the plot method off of the ax object and pass in our x and y variables. There is a extra equal sign. So then we'll run this. And there we have it. We have a simple line chart, but now we have created tick marks along the axes, and we've created a figure in which the line chart can be displayed. These are the basics of Object-oriented plotting. Now let's go into some more details. We're going to add limits and tick marks on the x and y axes. So we'll start again with our figure and our axes. And I'll just go ahead and copy this code so we don't have to type it all out again. Now let's add some limits to our x and y axes. To do that, you're going to call the xlim function and set the 8 ylim function. And basically what we want to do is we want to set the limits of our axes, and then we need to pass a list that tells Python what we want those limits to be. So in this case, that will be 1 and 9. So we'll say ax.set_xlim and then the limit is going to be 1 and 9. And then moving into the ylim, we say set_ylim, and we define those limits. So those are going to be 0 and 5. And then we also want to just practice with setting some tick marks. So to do that, we're going to use the xticks function and set yticks function. So to do that, we're going to use the set xticks function and the set yticks function. So let me just write those out here and we'll say set_xticks. Let's also just set it up for our y tick marks. I'll copy this over. Okay, great. So now let's pass in a list here and say what we want our tick marks to be. And so for the x axes, let's just make that, make those 0, 1, 2, 3, 4, 5, 6, 8, 9 and 10. And then for our y ticks, let's make those 0, 1, 2, 3, 4, and 5. All right. And then we'll plot this out using the plot function. So now we have another line chart, but you can see now that we've added tick marks and we've also added limits to our axes. So if we look back and forth between the prior graph and this one, you can see the changes. Specifically, you can see that the 7 tick mark is missing here on the x axis, and the maximum limit of the y axis is now 5 here instead of 4, just above 4 in the prior graph. Another thing you can do is that you can add a grid to the background of your chart. So let me just show you how that works real quick. What I'll do is I'll copy in this code from above, and then we'll just add a grid to the plot. And to do that, we just call the grid function. So we'll say here, I'm going to take these tick marks out, and then we'll say ax.grid and then we'll plot it out, ax.plot and then we'll pass in our x and y variables. And then we'll run this and we'll get a nice little grid background on our line chart so that it makes it more easy to read. You can also generate multiple plots in one figure with a subplots function like I mentioned in the lecture. So let's go ahead and do that. First things first, of course, we need to generate a figure. So in this case, it's going to be fig is equal to plt.figure. This is the same as last time, but we're going to adjust the figure to actually include two subplots. So to do that we need to say fig, and then we need to create two axes here. To do that, we're going to create a tuple, and we're going to say ax1 and ax2. Then we're going to set these equal to the subplots function. That's plt.subplots, then we want to define what we want our subplots to look like. So let's say we have 1 row and 2 columns. So we would just say 1 and 2 here. Okay. And then to plot it out, what you need to do is you need to actually plot both axis, axis 1 and axis 2. So we'll say ax1.plot. Then we'll pass in the x variable. And ax2.plot and we'll pass in the x and y variable here so that we have a little bit of a difference in our plots. And then when I run this, oh before I do that, it's in markdown, so I need to just make sure it's in Python. And then when I run this, I'm missing a comma here. So I'll run this and I need to add the figure subplots, okay. Here we go. So now we have two subplots. What we've actually done though is we have created one figure with two axes, and then we have generated plots within that one figure. Pretty cool, huh?


Imagine you're drawing a picture to tell a story. In data science, we use plots (like charts or graphs) to tell the story of our data. Here's how you can create a good story with your data using Matplotlib, a tool in Python:

Starting with a Blank Canvas: First, you create a blank space (figure) where your story (data plot) will go.
Setting the Scene: You add axes to your canvas. Think of axes as the frame of your picture, marking the edges where your story happens.
Drawing the Story: Inside this frame, you draw your plot. This could be lines showing trends over time or dots showing individual data points.
Adding Details: Now, you add details to make your story clear. This includes:
Tick Marks: These are small lines on the axes that help you measure distances, like the ruler marks.
Grids: These are like the lines in a notebook, helping you align and understand your story better.
Subplots: Imagine you want to tell multiple small stories within your big story. Subplots let you divide your canvas into sections, each showing a different part of your data story.

For example, if you're telling a story about how the number of ice creams sold changes with the seasons, your plot might show lines going up in summer and down in winter. The tick marks could represent months, and a grid might help you quickly see which months had the highest sales.

By following these steps and adding these elements, you make your data story easy to understand, helping others see what you see in your data.