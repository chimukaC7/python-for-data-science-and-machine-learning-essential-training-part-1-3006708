Creating labels and annotations
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Labels and annotation add a deeper layer of context to a plot, enabling the plot to convey extra meaning to its viewers. In this section, I'm going to show you how to label plot features, add a legend to your plot, and annotate features on your plot. But before that, let me give you an example of where this comes in handy. Data journalists often add a lot of context and annotation to their visualizations in order to add and augment the story they're telling. For example, imagine you're a data journalist covering a story of tourism in central Florida. You'd use a simple line chart to show the number of travelers over time. But if you're telling a story about the success of a grand opening of a new theme park, you may want to add some text about how many visitors came to the grand opening. You then may also want to add a pointer that ties that text into the date of the park's grand opening. There are two methods for labeling and annotating. Again, the functional and object-oriented method. I'm going to show you both of those in the demonstration to come. But before that, let me give you some extra information about the methods we'll use. In order to add a legend, you'll need to call the legend method and you'll pass in a label and a location. This will then place a legend on your plot axes. Over here on the right of the page, you can see all of these different options in terms of where you want to position your legend on your plot. And then with respect to annotating your plot, you would call the annotate method, and then you would just pass in a parameter for the location that's being annotated, as well as the location of the text and any information that you want to add about how the arrow should be drawn. So let's get to work on doing this in Python. The Jupyter Notebook here is already coming preloaded with the libraries you'll need. So those are numpy, pandas, matplotlib, and seaborn. I've also added in the parameters for plotting by matplotlib, which you can see right here. So everything is all typed out for you. Let's just start by labeling plot features. And I'm going to start by showing you how to do that using the functional method. So the first thing we need to do is to create some variables. Let's create an x variable using the range function, and we'll just create a series of numbers between 1 and 9. And then let's create a Y variable. We'll set that equal to a list, which will contain the values, 1,2,3,4,0.5,4,3,2,1. And then say we want to generate a bar chart. So to do that, we'll use the bar function. That's plt.bar, and we'll pass in our variables x,y. And then let's go ahead and create a label. To do that, we will call the xlabel function. So that's plt.xlabel. And then we'll pass in a string with the label that we want to be showed on the x-axis. So we'll say your x-axis label just to make this super clear. And then let's also create a label for the y-axis. So to do that, it's actually very simple because the function for that is just ylabel. So I'm going to copy this code and then just change out the function name here for x for y, and then update the string and then run this. Okay, cool. So now we have a bar chart and it looks like we actually have two labels, one on the x-axis and one on the y-axis. And we did that using the functional method. So now I want to show you how to do the same thing with something like a pie chart. So let's create a new variable here and we'll call it z. And we'll say z is equal to a list that contains the values, 1,2,3,4,0.5. And then let's also create some labels and we'll label it according to vehicle type. So we'll call this veh_type, and we'll set it equal to a list that contains a series of strings where the first string is 'bicycle', the second one is 'motorbike', third one is 'car', the fourth one is 'van', and then the fifth one, let it be 'stroller'. Now we want to generate a pie chart. So we'll call the pie function, it's plt.pie, and we'll pass in our variable Z. And then we needed to find the labels parameter. We'll just say labels=veh_type. And then plot it out using the show function, plt.show. You can see what this has done is it has gone along and nicely created some labels on the outside of the pie chart. This is still the functional method of creating labels. Now I want to show you the object-oriented method. So for this part of the demonstration, I want to use the mtcar dataset that we've been using in earlier demonstrations. So I'm going to set the address for that first. I'm going to go up to the data folder and right click to get the path and then paste that into the string here, right? So we have the address for our CSV file. And then let's create a data frame called cars. And then we'll read in the file using the read_csv function. So that's pd.read_csv, pass in address, and then let's assign names to the columns. To do that, let's first select the columns by saying cars.columns, and then we'll assign values to these column names by just setting this equal to a list of strings with names for each of the columns. So the first column is 'car_names', and then I'm just going to copy and paste over the rest of the column names, which are 'mpg','cyl','disp', 'hp','drat','wt','qsec', 'vs','am','gear','carb'. And now let's isolate the mpg variable. So to do that, we're going to say mpg = cars.mpg. And since this is object oriented, of course, we'll start first by creating a figure. So we're going to do that by calling the figure function, which is plt.figure, and we'll set this equal to fig. Then we're going to add some axis to the figure. To do this, we need to call the add_axes method off of the fig object. So we'll say fig.add_axes, and then let's define what we want for our axes. So create a list here. I'll say .1,.1,1,1, and we'll set this whole thing equal to ax. Now let's call the plot method. So to do that we say mpg.plot. But before actually running the cell, let's go ahead and add some tick marks and labels along the axis. So to do that, we will use the set_xticks method. So we'll say ax.set_xticks, and then we'll pass in range function and we'll pass in the value 32. Okay, and then let's also set some xticks labels. So we'll say ax.set_ticklabels. And within that function, we're going to pass the car names, that's cars.car_names. And let's add a little rotation to the label so that they're easier to read. To do that, we'll pass a perimeter that says rotation=60. Looks like I need to move this bracket. And then we'll also set a fontsize='medium'. So it's fontsize=, and then create a string that reads 'medium'. Okay, so we need to make sure that this says set_xticklabels. So I need to add an x here. And then let's also add a title. To do that, we'll call the set_title method off of the ax object, set_title, and then we'll pass in a string for the title of the graph. And let's call it 'Miles Per Gallon of Cars in mtcars'. Lastly, I would like to create some labels for our chart. So we'll call the set_xlabel method and the set_ylabel method. So ax.set_xlabel, and then pass in a string that reads 'car names'. And then for the ylabel, we can actually just copy this. The method is ylabel. So I changed this here, and then I update this string to read 'miles/gallon'. Okay, I am just looking it over real quick to make sure that I don't see any syntax errors. And then let's run this. And here we have our printout. So look how nice this is. We've got a little rotation in terms of the labels on the x-axis, and both the x-axis and the y-axis are labeled. The only thing that's not so nice about this graph is of course the text, which is kind of piling on top of itself. And that's actually because we set the parameters with the rcParams at the top. And so it's eight inches wide. If we wanted to fix that, we could just change that to 12 here and then go back down and run this code block and you'll see that. Okay, now it's much more nicely spaced. And we also have a title to the chart. I also wanted to show you how to add a legend to your plot. So we'll first do that with a functional method and let's call the pie function and we'll pass it in our z variable. So that's plt.pie, and then pass in our z variable. And then let's also create a legend. To do that, you need the legend function. So we'll say plt.legend, and then we need to pass in our vehicle type because we want to use those as our labels in our legend. So that's the veh_type. And then we want this legend location to be set at the best possible location, right? So to make that happen, we will set the loc parameter equal to 'best', and then you just plot it out. To do that, you call the show function. And then, cool. Now we actually have created a nice little legend for our pie chart, and that's awesome. Let's also look at how we can create a legend with the object-oriented method. So what I'm actually going to do is I'm going to go back up here to the top where we've already written all of this code and I just want to reuse it and adjust it. So I'm going to take this chunk here and I'm going to paste it down here. And we're still using the mpg variable. The xticks are the same. And the only thing we're actually going to change here is that we're going to add a legend. To add a legend, we'll call the legend method off of the ax object. So we'll say ax.legend. And then we also need to set the perimeter for the location. Again, let's just set that equal to best. So we'll say loc='best'. Run this, and nice. You can see up here in the upper right corner, we now have a legend. And the final thing we're going to cover in this demonstration is how to annotate your plot. So first things first, let's just look and find out what is the max value for our mpg variable. To do that, we're going to call the max method off of the mpg variable here, so mpg.max. And we can see that the max value in the mpg variable is 33.9. So let's go ahead and label that point on our chart. I'm going to go back up and get the code for this chart again so we can reuse it. And what I want to do is set a limit to this chart for the y-axis. So to do that, I'll use the set lim method. So we'll say ax.set_ylim, and then we'll pass in a list that contains two values. So our minimum y limit will be 0, and our maximum y limit will be 45. And let's also create some annotation. To do that, we'll call the annotate method off of the ax object, so ax.annotate. And the first thing we need to do is pass in a string, which is going to be the text that should be added as annotation to the graph. We'll move this up and then create the string that says 'Toyota Corolla'. And then we need to give some details about where this annotation should be placed. So we're going to say xy=, and then we're going to create a two pull that describes the position. So we'll put 19 and 33.9. Okay, and then we also need to go ahead and pass a parameter for the xy text. Basically, where the text needs to be placed. So we'll say xytext=, and then it's created two pull. And we'll say we want the text to be positioned at 21 on the x-axis and 35 on the y-axis. And let's also set an arrow, okay? So to do that, we're going to pass a perimeter that reads arrowprops, and then we're going to set it equal to a dictionary. And then we're going to set a color for our arrow, and that color is going to be black. So we need to call the dictionary constructor. And then we need to say that the facecolor parameter is equal to a string called 'black'. And then let's just shrink it up a little bit. So we'll pass a perimeter that says shrink=0.05. So I'm going to print this out. And look at that, we have a nice annotation with an arrow pointing to the maximum value for mpg. And because we created this nice label, it's really obvious and easy to see that the Toyota Corolla is the vehicle that is getting the best mile per gallon out of all of the cars in the mtcar dataset. Now that you know how to add labels and annotation, let's look at how to visualize time series in Python. That will be our next lecture.


In the “Creating labels and annotations” video, you're introduced to enhancing plots with labels and annotations using Python's Matplotlib and Seaborn libraries. Here's a breakdown to help you understand better:

Labels: These are used to add meaningful names to the plot axes. For example, if you're plotting the number of visitors to a theme park over time, you might label the x-axis as “Time” and the y-axis as “Number of Visitors”. This makes your plot easier to understand at a glance.

Annotations: Annotations allow you to highlight specific points on your plot with text and/or arrows. For instance, if there was a spike in visitors on the opening day of a new ride, you could annotate this point to draw attention to it. This is particularly useful for storytelling with your data, as it helps to guide the viewer's focus to key events or values.


The video demonstrates two methods for adding these elements to your plots:

Functional Method: Directly uses Matplotlib's pyplot (plt) functions to create and manipulate plots. This is a straightforward approach where you call functions like plt.xlabel(), plt.ylabel(), and plt.annotate() to add labels and annotations.

Object-Oriented Method: Involves creating figure and axis objects first, and then calling methods on these objects to customize your plot. This method offers more control and is useful for complex visualizations.


For example, to label axes in the object-oriented method, you would create a figure (fig = plt.figure()) and add axes to this figure (ax = fig.add_subplot(111)). Then, you can use ax.set_xlabel('Your Label') and ax.set_ylabel('Your Label') to add labels.

Annotations are added by specifying the point to highlight and the text you want to display. For example, ax.annotate('Highlight', xy=(x, y), xytext=(x2, y2), arrowprops=dict(facecolor='black')) would create an annotation with an arrow pointing from the text at (x2, y2) to the point (x, y).

Understanding how to effectively use labels and annotations will significantly improve the readability of your plots, making your data analysis more intuitive and impactful. Given your background and goals, mastering these techniques will be invaluable in presenting data insights clearly in your future machine learning projects.