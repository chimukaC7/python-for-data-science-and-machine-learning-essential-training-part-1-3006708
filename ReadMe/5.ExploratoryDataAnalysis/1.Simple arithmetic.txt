Simple arithmetic
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] In this section, we're going to be talking about how to do simple arithmetic in Python. The benefit of the NumPy library is that it makes it really easy to do math on data that's stored in either arrays or matrices. Now, an array is just a one-dimensional container for elements that are all of the same data type. And, matrix is just a two-dimensional container for elements that are stored in an array. The basic arithmetic operators in Python are addition, subtraction, multiplication, and division. Let me give you an example of where NumPy can come in handy. Have you ever tried to use a spreadsheet application to perform mathematical operations on a data set that has more than 300,000 rows? What happened? If the application didn't crash, then it took a lot of time and effort to get the program to make the computation. But with NumPy, on the other hand, you can quickly and easily do mathematical and statistical operations on data sets with even millions of records. Simply put, NumPy makes it easy to do math on large data sets. With this slide here, I just wanted to familiarize you with the operators that you will use in Python to achieve these arithmetic operations. So we're starting out the coding demonstration with having imported NumPy and also imported the random number generator from NumPy. Just run this. And, it never looks good to see more than two digits after a decimal point, so let's go ahead and limit the number of decimal places returned in this demonstration. So to do that, you would just say, np.set_printoptions, and then let's set a precision of 2. So precision equal to 2, and run this. Now the first thing we're going to do is look at math with arrays. So we of course need to create some arrays to do that math. And our first array will be array a, and we'll set that equal to an array of six values. So what we need to do is call the array function, np.array, and then we'll pass in a list of values from one to six. And then print that out. We'll just say a and run this, and there you go, we have an array of six values. And then let's create a second object, which will be a matrix and we'll call it b. And to create this matrix, we'll use the array function, so we'll say np.array, and this time we need to pass in two lists. So the first one is going to contain the values, 10, 20, and 30. And then the second list will contain the values, 40, 50, and 60. And then we'll print this out and very good, we have a matrix. Now, before we're actually going in and doing math, let's create an array via assignment. I want to show you how to do that. So let's this time use a random number generator in NumPy, and what we're going to do is we're going to create six random values. So to set the seed for a random generator, we need to say np.random.seed. And this just makes so that the results you get on your computer will be the same as we, as I show you here in the demonstration. And then we need to assign a value to the variable c. So we'll say c is equal to 36 times, the random numbers that are generated by the random number generator in NumPy. So we'll say np.random.randn, and let's pass in the value of six. This is just saying that we want to have six values. And we'll print this out. And the one thing that I would like to point out here is that when we use the randn function, which is the random number generator in Python, what that is actually doing is it's generating both positive and negative random numbers. Now let's create a fourth array, which is going to be called d, and we'll set d equal to a series of sequential numbers between 1 and 34. So we'll use the arange function, np.arange, and then we will make the starting point 34 and the ending point 35, where 35 is excluded from the series of numbers that's output from this function. And we can just go ahead and print this out. Okay, great. So we have our array. Now let's just start performing some math. Before doing so, I just want to point out one thing here because I'm calling all of these objects arrays, but some of them are actually matrices, and what I want you to keep in mind is that a matrix is actually just a two-dimensional array. That's why you're hearing me say array when I'm actually creating matrices and kind of using them interchangeably in certain points. First things first, let's just multiply the array a by the number 10. So we'll say a times 10, run this. And if we look back here at the a variable, if we multiplied each of these numbers by 10, we would get this output here. Makes sense, and that was very easy to do, very straightforward. Now let's try an addition operation. So we'll do c plus a, and run this. So this output array is a result of adding the c array to the a array. Just to do a little back checking here, let's look at the value of c and a, to make sure it matches up. We've got a 9.22 and up here, c, c here is 8.22, go up a, value here is 1, so when you add those together, you get 9.22. So yeah, that makes sense. As you can see, it's really simple to do straight-out arithmetic with arrays and matrices in Python. Let's do c minus a. And again, makes sense. This time we're getting 7.22, which is 8.22 minus 1. So yep. Now let's try c times a, which of course should be 8.22 as the first value in the output array. So we'll say c times a, and run this. And yeah, it's 8.22. Makes sense. And if you wanted to do division here, all you'd have to do is say c divided by a. And of course, 8.22 divided by 1 is going to be 8.22. So we're good to go there. And now you know how to do simple arithmetic using arrays and matrices in Python.


The “Simple arithmetic” video provides several crucial insights, especially for someone transitioning into a Machine Learning Engineer role:

NumPy for Efficient Arithmetic Operations: The video highlights how NumPy simplifies arithmetic operations on large datasets, a fundamental skill in data science and machine learning. It demonstrates basic operations like addition, subtraction, multiplication, and division on arrays and matrices.

Practical Application of NumPy: Through examples, it shows the practicality of using NumPy for handling mathematical computations on large data sets efficiently, contrasting it with the limitations of spreadsheet applications for similar tasks.

Creating and Manipulating Arrays and Matrices: You'll learn how to create arrays and matrices using NumPy, perform arithmetic operations on them, and understand the significance of these operations in data analysis and machine learning projects.


These takeaways are foundational for your aspirations in machine learning, enhancing your ability to manipulate and analyze data effectively.


Ember needs to perform arithmetic operations on a large dataset in Python. Which library makes it efficient for her?
-NumPy


Jiana is analyzing patient health data and needs to detect anomalies to alert doctors. Which method helps generate summary statistics efficiently for her?
-pandas.sum


How does categorical data summarization contribute to data analysis in sentiment analysis?
-by calculating the sum of unique values in an array

What does the Pearson correlation coefficient measure?
-the correlation between linearly related continuous numeric variables

In a study, Tertius is examining the relationship between income brackets and smoking habits. Which statistical method is most suitable for analyzing this data?
-Spearman's rank correlation


What is the purpose of multivariate analysis for outliers?
-to identify outliers that occur in observations from two or more variables