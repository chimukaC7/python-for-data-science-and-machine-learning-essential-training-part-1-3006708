Summarizing categorical data
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Let's talk about how to summarize categorical data. Categorical data is described by how observations are distributed across a variable's categories. A very simplistic approach to sentiment analysis could involve web scraping public product reviews, then classifying certain words found in the scraped data as positive or others as negative. You could then do a categorical word count on the product review data to score product reviews or feedback as either good or bad. Categorical variables only assume a fixed number of values. So, as you can see here, we have a very simple dataset that contains apples and oranges. So this variable here, the fruits variable, is actually a categorical variable. And then what you can do is you can group your categorical variable into subgroups based on the fruit category. So in this case we could break down the dataset into apples and oranges based on this categorical fruits variable. There are three main ways to describe categorical variables. Those are counts, variable description, and grouping. So I'm going to show you how to create each of these three types of descriptions over in the Jupyter Notebook. Right, so we're bringing in numpy and pandas. I've already got those imported for you into the IPython environment. And I've also got the empty cars dataset ready for you to go here. So let's just take a look at the first 15 records. To do that, we will use the head method. So we'll say cars.head() and then pass in the number 15. Now, you get a basic idea of the data that's inside this dataset. And, of course, we've also now set an index. That index here is equal to the car_names variable. So you can see that here. We set it here. Okay, so the first thing that I want to show you is the value_counts method. And this method makes a count of all the unique values in an array or a series object. So, first, let's just isolate our car variable. This is for carburetors. It's a number of count of carburetors that each car has. carb is equal to cars.carb. And then we'll generate the value counts by calling the value_counts method. We'll say carb.value_counts() and run this. And what you're seeing here is that there are 10 cars that have four carburetors. There are 10 cars that have two carburetors. Seven cars have one carburetor. Three cars have three carburetors. And so that's basically how you need to interpret this result. Now, let's look at the groupby function. And to group a dataframe by its values in a particular column, you just call the groupby method off of a dataframe and then pass in the index value of the column series you want the dataframe to be group by. So let's just create a subset of our dataframe, and we'll call that cars_cat. And within this subset, we'll include five variables, the cyl variable, the vs variable, the am variable, the gear variable, and, last one, carb. Add the single quote here. Then let's just print this out. So we'll say cars_cat.head(). Run this. Okay, so here we have a small subset of our original cars dataframe. So now let's group by the gear variable and then describe the dataset by that unique grouping. In order to do this, let's just create a new variable called gears_group. And then we'll set it equal to our cars_cat dataframe. And what we'll do for the grouping part of this is that we will call the groupby method off of that dataframe and pass in the label index of the column by which we want the dataframe to be grouped which is gear. Then we want to generate a statistical description of the dataset based on that grouping. So let's just use the describe method. We'll say gears_group.describe() and run this. As you can see, we have three rows by 32 columns. The reason we have three rows is because there are only three different options or your count for the cars dataset. And then we have 32 columns because for each of the variables in the small subset, the cars_cat subset, we have generated statistical descriptions for each of them. So, as you can see, we're getting a long output table. The next thing we need to look at is how to transform variables to categorical data type. Now, to create a series of categorical data type, you would just call the pd.Series function on an array or a series that holds the data you want the new series object to contain. Now, when you pass in the dtype equal to category argument, this tells Python to assign a new series data type of category. Here, we'll create a new categorical series from the gear variable. And then we'll assign it to a new column in the cars dataframe called group. So we'll say cars[], and then we will create a new column here called group. And then we're going to say that this is equal to a new series object that we're going to create here with the series constructor. So we're going to say pd.Series(). And we'll pass in cars.gear because we're interested in converting the cars.gear variable to a series. And then we want to, of course, assign the dtype equal to category. Take that and then print this out. Now, let's just print out this new variable and look at its data type. So to do that, we will just copy our variable here, cars['group'], and then we call the dtypes method off of that, .dtypes, and run it. Okay, great, so now you see that we actually do have a categorical data type, and it's part of our cars dataframe which is cool. We just created this new variable and added it to our cars dataframe. Now, let's look at the distribution of gear types in this variable. To do that, what we would need to do is say cars[] and then select our group variable here and then call the value_counts method off of that, value_counts(). And so here we have got cars with three different counts of gears. So pretty much makes sense. Last thing I wanted to show you in this demonstration is basically how to create a crosstab or cross-tabulation table. These are very important. You need to know how to use these in order to make sense of categorical data in data science. Let's just start by creating our crosstab. To create a crosstab, you would just call the pd.crosstab function on the variable you want included in the output table. So let's do that here by saying pd.crosstab(). And we're going to select our first variable which would be the am variable. So we'll say cars[] and then select the am variable. Then for our second variable, that's going to be the gears variable. So we'll say cars[], and we'll select gears. And we run this. Looks like there is a typo. Yeah, so I need to take this s out, then run it again. And, as you can see, we have a really concise summary of each of these two variables. A crosstab is a cross tabulation of two or more features. By default, a crosstab shows frequency counts for features. So the example we just did in Python, we basically selected this am variable and the gear variable, and Python went ahead and created a small cross tabulation of these two variables and described to us basically about how gears are broken up with respect to automatic and manual transmission. So the am stands for manual transmission. And what this table is telling us is that for cars with a manual transmission, they mostly have three gears, but cars that have an automatic transmission are more likely to have five gears. It's basically showing a distribution of gear counts based on the type of car transmission. This is just a very simple example of how you can use crosstabs to generate summary statistics and descriptions of categorical data.


Certainly! The video “Summarizing categorical data” talks about how to understand and organize data that falls into specific categories, like types of fruits (apples, oranges) or car models. Imagine you have a basket of fruits and you want to know how many apples and oranges you have. This is similar to what summarizing categorical data is about. Here’s a breakdown:

Categorical Data: This is data that can be sorted into categories. For example, if you have a list of fruits, the types of fruits (apples, oranges) are categories.

Counts and Descriptions: You count how many items fall into each category. If you have 10 apples and 5 oranges, your count for apples is 10 and for oranges is 5.

Grouping: Sometimes, you might want to group your data to see patterns. For example, if you have cars and you know their colors and types, you might group them by color to see how many of each type you have in each color.


The video uses tools like Python to do this digitally with larger sets of data. It’s like sorting and counting things into buckets, but with data and using code to make it faster and easier.

Value Counts: This is a way to quickly see how many of each category you have. Like if you quickly wanted to see how many red, blue, and green cars are in a list.

GroupBy Function: This lets you organize your data by a specific category. For example, if you have a list of students with their grades, you could group them by grade to see how many students are in each grade level.

Crosstabs: This is a more advanced tool that lets you look at how two categories interact. For example, if you wanted to see how many students prefer science over math, split by grade level.


In simple terms, summarizing categorical data helps you understand what you have by sorting it into categories, counting how many items are in each category, and seeing how different categories relate to each other.


