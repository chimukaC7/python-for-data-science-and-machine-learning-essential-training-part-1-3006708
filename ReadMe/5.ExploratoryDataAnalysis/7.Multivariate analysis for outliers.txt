Multivariate analysis for outliers
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Now let's talk about multivariate analysis for outliers. Use multivariate methods to find outliers that only show up within combinations of observations from two or more different variables. There are many different multivariate methods to detect outliers. We are going to pick up where we left off in the last section with the box plot, and then I'm going to introduce you how to use scatterplot matrices to find outliers. For this demonstration, we're bringing in our standard libraries, pandas, matplotlib, and seaborn. So all of these are already loaded in the notebook, and I've also set the plotting parameters for matplotlib, and I preloaded the iris dataset, which we worked with in the previous demonstration. So all you need to do is run these code blocks. And then let's just print out the first five records in this data frame so we can get a look at the data. And next, let's generate a box plot. To do that, we'll use seaborn's box plot function. So what you need to say is sns.boxplot. And for X, that's going to be equal to our species column. So you'll say X is equal to a string that reads species. For our Y variable, we're going to set that equal to the sepal length label. Sepal length. In terms of the data we want plotted, that's going to be our data frame. So we'll say data is equal to df. And then with seaborne it gives us a lot of different color options. So in this case, we want our hue to be set equal to species. And we'll set our color palette equal to HLS. So we'll say palette equal to, create a string and write HLS. And lastly, we'll just say legend is equal to false. Okay, so checking to see if I made any typos. The only thing I can see is that this should be boxplot instead of barplot. So let me change that. I'm going to run this. And great. So now we have a box plot. And there are two things I want to point out about this box plot here. One is that we are plotting sepal length against species. So we're actually plotting two variables in one box plot. When we do that, the outlier falls out, as you can see here. It's passed the whiskers in the virginica species. And this would be considered as suspicious for being an outlier. Now let's look at the scatterplot matrix. It's really easy to generate a scatterplot matrix using seaborn. So we'll just say sns.pairplot. And we're going to plot out our data frame. So we'll pass in df as the first variable. We'll set our hue equal to species. And again, we'll set our pallet equal to HLS. We run this. And look how beautiful that is. So now we have a great scatterplot matrix. Let me take you over to the other side to explain what all of this actually means. So we already know that our sepal width variable is suspect for outliers. If you look at each of the scatterplot matrices, there's an odd red point that doesn't fit any of the other clusters. And so I've added a circle to that and pulled it up from the data table. That's actually record 41. So I just jotted that down. And I keep that in mind, to investigate whether that's an outlier and whether it needs to be removed. And that's it for using multivariate outlier detection methods. Now let's look at applying Tukey outlier labeling. This is basically just a manual process for finding outliers if we don't use the box plot. So in this case, what we need to do is we need to get some display settings. So we're going to say pd.options.display.float format. And we're going to set that equal to a string value, which contains a dictionary, and it's going to include a blank value. So we'll create a string and then a dictionary. So colon 0.1 F. and then we're going to say dot format. Okay. So this is basically just setting up the display settings. And let's create a X data frame. So we'll call it X_df, and we'll set it equal to pd. And we're going to call the data frame constructor here and pass in our X variable that we created earlier. And then let's just print out a description of these variables that are in the X data set that we created. So to do that we're going to say print, call the print function, and then we're going to pass in X_df. And off of that we need to call the describe method. And then print this out. Now we have some descriptive statistics on each of the variables in our data frame. Let me explain to you what these actually mean. Let's see how we can use them to find potential outliers. The interquartile range is the distance between the third quartile and the first quartile. 75% is our third quartile. So let's say 3.3 here. Minus 2.8. That's our first quartile. The difference between them is 0.5. So we multiply the interquartile range times 1.5, and we get a value of 0.75. To find outliers from our first quartile, we would just look at the value from the first quartile, which is 2.8, and we would subtract out 0.75, which gives a value of 2.05. We see that our minimum value is even less than that, which means that it's suspicious for being an outlier. Finding an outlier from the third quartile uses the same approach. In this case, you would take the value from the third quartile, which is 3.3, and you'd add 0.75. That gives us 4.05. And since the max value of the sepal width column is greater than 4.05, we know that the supple width is suspect for having outliers. That's it for univariate methods to find outliers. And next, I'm going to show you multivariate analysis for outlier detection.


Certainly! The video on “Multivariate analysis for outliers” covers several important concepts:

Multivariate Outlier Detection: It emphasizes the use of multivariate methods to find outliers that are not apparent when looking at single variables alone. This is crucial for datasets where the relationship between variables can indicate anomalies.

Using Scatterplot Matrices and Box Plots: The video demonstrates how to use scatterplot matrices to visually identify outliers across multiple variables and box plots to detect outliers within individual variables. This is particularly useful for data scientists to ensure data quality before analysis.

Practical Application with Python Libraries: It provides hands-on examples using Python libraries like pandas, matplotlib, and seaborn to perform these analyses, showcasing how these techniques can be applied in real-world data science projects.


These takeaways are particularly relevant for someone in your field looking to apply data science and machine learning techniques to solve complex problems.