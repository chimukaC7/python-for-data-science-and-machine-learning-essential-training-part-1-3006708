Generating summary statistics
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Descriptive statistics describe a variable's values and their spread. For example, imagine you work for a company that monitors patients' health in real time and you need to build a script that detects dangerous anomalies. You could generate summary statistics in micro batch and then calculate the mean, max, and standard deviation of incoming health data that's generated from the monitoring device. With these descriptive statistics you could generate automatic alerts when unusually high or low data points are generated by the patient's monitoring dived indicating potentially dangerous health status of the monitored patient. Descriptive statistics provide a quantitative summary of a variable and the data points that comprise it. You can use them to get an understanding of a variable and the attributes that it represents. There are two categories of descriptive statistics. One is descriptive statistics that describe the values of an observation in a variable. And the second is the descriptive statistics that describe a variable's spread. So to get more specific, if you wanted to generate descriptive statistics that describe the observations in a variable then what you would do is you'd go ahead and calculate the sum, median, mean, and max of those observations in the variable. But again, the second way to generate descriptive statistics is to describe the variable's spread. And if you wanted to do that what you would to is calculate out standard deviation, variance, counts or quartiles. If this doesn't make a lot of sense to you now just hold on, because I'm going to show you an example on the coding demonstration and then you'll really understand what I'm talking about. But first let's look at some of the uses for descriptive statistics. You can use descriptive statistics to easily detect outliers. You can use it for planning data preparation requirements for machine learning, and you could use it for selecting features for use in machine learning. Okay, so now let me show you how to generate summary statistics using pandas and scipy. We're going to start off, of course, by bringing in our libraries. So we need to to import numpy, pandas, series and data frame and then also scipy. I want to point out that we are importing stats from scipy. And I've got these already loaded for you in the Jupiter notebook and your notebook's also coming preloaded with the MT car's data set just to save you time so you can just go ahead and run these. We've already covered these in previous lectures. And what I'd like to do first is just to print out the first five records of the cars data frame here. So we'll say cars.head. Run this. And now we have a little preview of the data we've got inside of the cars data set. Now I want to show you how to use the sum method. So we'll drop down here and the sum method adds up the total of numbers in a column, or in rows of a data frame. By default, sum will count up values and provide a total for each column. But if you pass an axis equal to one argument then it will add up the values along the data row-wise instead. So let's practice with this one. So we'll just say cars.sum and run this. So how this works is, the sum method has gone along and summed up the values in the columns of the cars data frame. But if you wanted to sum the values along the rows instead that's easy enough to do. You would just take the same command and then you would pass in a perimeter that says axis is equal to one. So let's try that out here. We'll say cars.sum and we'll say axis equal to one. And of course, we only wanted to sum up numeric values so we'll pass in an argument that says numeric_only equal to true. Looks like I need to change this m to an n. And run this. And there we have it. So this is basically the output of the summation, the values of the dataset, row-wise. The median method finds and returns a median value with the middle value from the columns or rows of the data frame. So let's calculate a median value by saying cars.median and then again we need to pass a perimeter that says numeric only equal to true and run this. And then what Python has done here is it's gone into each of the variables in the cars data set and it's found the median value for each of those variables. It's returned those as an output here. And to calculate the mean it's very, very simple. You can just say cars.mean. And again pass in the numeric only equal to true. And run this. And this is the average value for each variable in the cars data frame. If you wanted to generate some statistics about the maximum value for each variable we would just say cars.max and then what this is doing is it's outputting the greatest value in each of the variables. Now if you wanted to be able to identify the row where the maximum value came from you'd just call the id maximum method. To see the index value of the row that contains the maximum value. So let's try that out here. We'll look at the mpg variable. To isolate that, we'll say mpg is equal to cars.mpg, select that variable, and then we'll call the id xmax method off of this so that's mpg.idxmax and then what we're seeing here is that 19 is the index number of the row where the maximum value was found in the mpg variable. Now let's look at som summary statistics that describe variable distribution. The most fundamental summary statistic that describes distribution would be standard deviation. And in order to generate that in Python you can just use the standard method. So for our example we would take cars.std and then pass in perimeter numeric only equal to true and run this. And what this has done is it's gone along for each of the variables and calculated the standard deviation of the values in that variable. To calculate the variance you would say cars.var, use the var method here. And set numeric only equal to true. And now you're getting the variance for each of the variables. There's also the value counts method and this method counts up the unique values in and array or a series object. It shows you how many unique values are present in a data set. So let's look at the gears variable. We'll isolate that. We'll create and object called gear so we'll say gear is equal to cars.gear and then off of that object we will call the value underscore counts method and run this. And what you're seeing here is that the gear variable has three unique values. Those are three, four, and five. On the right side you can see the unique counts for each of these variables. If you wanted to take a broader perspective, what this is really saying is that the cars data set has 15 cars with three gears, 12 cars with four gears and five cars with five gears. And I want to show you really quickly the easy peasy way to get an entire statistical description of a data set. This is the describe method. So all you would need to do is say cars.describe and with this you're basically getting all of the descriptive statistics that can be generated from each of the variables in the entire data set all at one time. So it's super efficient and helpful to have this on hand. Now that you know how to summarize numerical variables let's move on to summarizing categorical ones.


Certainly! The video “Generating summary statistics” covers several important concepts:

Descriptive Statistics Fundamentals: It introduces the basics of descriptive statistics, including measures that describe the central tendency (mean, median, max) and dispersion (standard deviation, variance) of data. These statistics provide a quantitative summary of data, which is crucial for data analysis.

Practical Application with Python: The video demonstrates how to generate these summary statistics using Python libraries such as pandas and scipy. This includes calculating sums, medians, means, and maximum values, as well as more complex statistics like standard deviation and variance.

Use Cases in Data Science: It highlights how descriptive statistics can be used in real-world scenarios, such as detecting outliers, planning data preparation for machine learning, and feature selection. This is particularly relevant for your interest in transitioning to a Machine Learning Engineer role, as understanding data through statistics is foundational in the field.


These takeaways are instrumental in building a solid foundation in data science and machine learning, aligning well with your career aspirations and background in software engineering.


