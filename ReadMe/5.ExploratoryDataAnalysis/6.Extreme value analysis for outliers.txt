Extreme value analysis for outliers
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Now, let's look at extreme value analysis for outliers. Most machine learning methods assume your data has been treated for outliers. Detecting outliers can be a data preprocessing task or an analytical method of its own merit. Basically, use outlier detection to uncover anomalies in data. In this section, we're going to talk about univariate methods. Some use cases for outlier analysis include detecting fraud, detecting equipment failure, and also cybersecurity event detection. Tukey methods are useful for identifying a variable's outliers. You can detect unusually high or low data points in a variable by applying the Tukey method for outlier detection. Data points identified using the Tukey method should be treated as potential outliers to be investigated further. This is a Tukey Boxplot and I wanted to point it out to you to show you how you can use a Boxplot to detect outliers. Boxplot whiskers are set at 1.5 times the interquartile range. The interquartile range is really just a distance between the lower quartile and the upper quartile. The upper quartile is where 25% of data points are greater than the value. And the lower quartile is where 25% of data points are less than the particular value. Any points beyond 1.5 times the interquartile range are considered outliers. They'll show up in a boxplot visually as the dots that extend past the whiskers of the boxplot. The other way to use Tukey methods to find outliers is to use the Tukey outlier labeling method. And this is essentially calculating the Tukey outlier mathematically instead of using the boxplot. So let's look at how to do all of this in Python. For this demonstration, we're bringing in the standard libraries, pandas and numpy. Please note that I also imported matplotlib and cbon as well as rcParams. We're going to be using scipy in this demonstration. So all of these are already loaded into your notebook. And I've also set the plotting parameters for matplotlib. We covered all of these in previous lectures. We're going to be using the iris data set in this demonstration. So let's go ahead and get that imported. We'll start by setting the address variable and we'll say that address is equal to and then create a string. And I'm going to go over to the notebook. You'll need to do this for your setup. So we want iris.data.csv. Right click "Copy Path" and then copy that into the string. Okay, great. So next, let's create a data frame called "df" and we'll use the read CSV file. So we'll say, "pd.read_csv" and then say "filepath_or_buffer" here. And we'll set that perimeter equal to "address". And for header, we will say "none". (keys typing) And then it separated with comma. So for sep, we set that equal to comma since it's a column delineated file. Okay, so now let's assign names to the columns. Say "df.columns". And then we'll set that equal to a dictionary, which contains column names. So the first column name is going to be "Sepal Length". The second column name is going to be "Sepal Width". Next, "Petal Length". And then, the last column... Then, there's two more columns, which are "Pedal Width" and "Species". Should be "Species". Okay, now let's just create an X and Y variable. For X, we want that to be a data frame that contains the predictor variables. So in this case, we're going to use the iloc method. So we're going to call that off of the data frame by saying "df.iloc". And then we're going to select only the first four columns. So we're going to say ":,0:4". Okay. And then we actually only want the values. So we'll just type ".values" here. And for our target, our Y variable, "y = df.iloc" and we're going to select the column at the column index position four. So we'll just put ":,4". And again, we only want the values. So then we're going to write ".values". And then let's go ahead and just print out the first five records. So to do that, we'll say "df" and then we'll select the first five records here. Run this. Ah. "PD is not defined." That makes sense because I didn't run this at the top here when I opened the notebook. So you always have to remember that even if your notebooks come preloaded, you, of course, have to run the cells in order to import your libraries and modules that you need. So, okay, I ran everything here. And then, now, we have the first five records in our dataset. So we've already gone ahead and split that data frame into a set of X variables as well as a Y variable. So now, let's begin looking at the Tukey boxplot. We can call the boxplot function off of the data frame in order to generate a boxplot automatically. So to do that, we'll just say "df.boxplot". And then we'll pass a parameter that says, "return_type=dict" for dictionary 'cause we want to return a dictionary. And then plot this out with a plot function here. "plt.plot". Run this. Okay, so here we have a Tukey boxplot for our four numeric variables from our data frame. So I'll go ahead and show you how to actually use this boxplot to detect outliers. So you see here, we have a boxplot and do you see those points that lay beyond the whiskers? Now, those are our potential outliers. What I did was I took a quick note of where those outliers were found. That's the Sepal width column and it's the values that are greater than four or less than 2.5, approximately. Let's look a little closer at these values. I'm going to use filtering in comparison operators to isolate these values from the rest of the data frame. So let's go back over to our coding demonstration and let's isolate Sepal Width. So let's get back over into our coding demonstration and then we'll isolate Sepal Width. To do that, we'll just say "Sepal_width = " and we'll set it equal to our X variable that we just created. And what we want to do is we want to select our Sepal Width variable. So we're going to say ":,1". And then in terms of our outliers, let's create a second variable here called "Iris Outliers". So this would be "iris_outliers". And we're going to say, "iris_outliers = Sepal Width greater than four" So we'll just set this equal to a tuple, where sepal_width is greater than four. And what we're actually trying to do here is isolate the records where this Sepal width is greater than four, so that we can understand what's really happening with these data points. Now, let's go ahead and print these out. So we'll say "df" and then we want to print out the iris outliers. (keys typing) Run this. Okay, it looks like I have a typo. This should be equals, not minus thing, and I fixed that, rerun it, and great. So we see that we have three records that have a Sepal width greater than four, which makes sense because, as you can see here, there are actually three small circles, right? 1, 2, 3, where they're outside the whiskers that are located at position of four here and the Sepal Width variable. Let's also isolate this value here that is below 2.05. So what I'm going to do is I'm actually just going to copy and reuse the code we just created here. (keys typing) Okay. And so all I need to do here is just change this so that it is Sepal width less than 2.05 and then run this. And as you can see, we have this one record here that is lower than the interquartile range and it corresponds to this point here in the boxplot. Let me try to explain what these records are actually telling us. Moving the results over here, I just wanted to point out that we now have the row index values for each of the records that are coming back in looking suspicious as outliers. Now, I'm going to show you how to do Tukey outlier labeling. Let's go back over to the coding demonstration. So in this case, what we need to do is we need to get some display settings. So we're going to say "pd.options.display.float_format" and we're going to set that equal to a string value, which contains a dictionary and it's going to include a blank value. So we'll create a string and then a dictionary. So ":1f" and then we're going to say ".format". Okay? So this is basically just setting up the display settings. And let's create a X data frame. We'll call it "X_df" and we'll set it equal to pd. And we're going to call the data frame constructor here and pass in our X variable that we created earlier. And then let's just print out a description of these variables that are in the X data set that we created. So to do that, we're going to say "print", call the print function, and then we're going to pass in X_df. And off of that, we need to call the describe method. And then print this out. Now, we have some descriptive statistics on each of the variables in our data frame. Let me explain to you what these actually mean. Let's see how we can use them to find potential outliers. The interquartile range is the distance between the third quartile and the first quartile. 75% is our third quartile, so we'll say that 3.3 minus 2.8, that's our first quartile. The difference between them is 0.5. So we multiply the interquartile range times 1.5 and we get a value of 0.75. To find outliers from our first quartile, we'll just look at the value from the first quartile, which here, it is 2.8, and we will subtract out 0.75. This gives us a value of 2.05. We see that our minimum value is even less than that, which means that it is suspicious for being an outlier. Finding an outlier from the third quartile uses the same approach. In this case, you would take the value at the third quartile, which is 3.3, and you'd add 0.75. That gives us 4.05. Since the max value in the Sepal Width column is greater than 4.05, we know that the Sepal Width is suspect for having outliers. That's it for univariate methods to finding outliers. Next, I'm going to show you some multivariate methods.


Imagine you're looking at the heights of all the students in a school. Most students have heights that are pretty close to each other, but then you find a few students who are much taller or shorter than everyone else. These students stand out because their heights are not what you'd expect based on the rest of the group - they are the “outliers.”

“Extreme value analysis for outliers” is like being a detective who's trying to spot these unusually tall or short students in a crowd. It uses a specific method, called the Tukey method, to figure out who these outliers are. Think of the Tukey method as a ruler that helps you measure how much taller or shorter someone is compared to the average height. If someone is way off the scale, they're considered an outlier.

In the video, they talk about using boxplots, which are like drawing a box around the group of average-height students. Anyone standing far outside this box is an outlier. They also mention doing some calculations to find these outliers more precisely, but the main idea is to identify those data points (or students, in our analogy) that are very different from the rest.

This process helps in many areas, like finding fraud in financial transactions or spotting errors in data collection, by highlighting the data points that don't fit the expected pattern.


