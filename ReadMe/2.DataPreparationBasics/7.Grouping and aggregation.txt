Grouping and aggregation
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Now, we're going to talk about data grouping and aggregation. Grouping and aggregation are useful for exploring and describing your dataset in its subgroups. Imagine you are a merchant that sells fruit and you have a dataset that describes the different types of fruit you have and where you purchase them from. To understand what a subgroup is, look at this example of the data set that has apple and orange records. If you were to reduce this data set down to its fundamental subgroups by fruit category, you would get two records, apple and orange. Grouping is an excellent method to use when you want to explore and understand your data and its inherent subgroups. It's useful for many, many reasons. You can group data in order to compare subsets and deduce reasons why subgroups differ the way they do. Or you may only be interested in specific subgroups for your analysis. Grouping can help you identify and subset out those subgroups. Okay, let's go ahead and look at how to group data by column index. This Jupyter notebook is coming preloaded with numpy and pandas, so just make sure to run that. And then for this demonstration, we're going to use a dataset called mtcars. The first thing we need to do is define a location for that dataset. So it's going to be address, I say address is equal to, and what you need to do is actually go into the data folder here and find mtcars dataset, and then right click. And you want to copy the full path here. So Copy path, and then back to the Jupyter notebook and paste the path in here. And now you have defined the address where the CSV file sits. To read it in, you want to use the read CSV function, so we'll call this dataframe cars and we'll say cars is equal to pd.read_csv, and we'll pass in the address. And then let's assign names to each of the columns in this dataset. So to do that, we need to access the cars columns. We'll say cars.columns and let's have that equal to a list. Within that list, we'll pass in the name of each of the columns. So the first column name is car_names. And then I'm going to go ahead and just paste in the rest of these. In a different coding demonstration, we will dig into further details about what these variables mean as needed. But for now, I'm just trying to show you how to group data by column index. So let's just take a look at the first five records in this data set. We'll say cars.head, call the head method off of that, and then print it out. And here we go, we have the first five records for the mtcars data set. So we're good to go there. Now, what I want to do is show you how to group this dataframe by a particular column. And to do that we'll use the group by method. So let's create a new dataframe called cars_groups. And we'll form that by calling the groupby method off of the cars dataframe. And then passing in, we'll be selecting the cylinder column. So we want to say cars.groupby. And then we pass in the cars dataframe, and then we'll select the cylinder column here. And so say we want to generate a mean of the values, the numeric values in the dataframe as grouped by the cylinders column. So to do that, we would say cars_groups, and then call the mean method off of that. We need to pass in a parameter that says numeric only equal to true, because we only want to be looking at the numeric values since we're calculating a mean. And then here, we can see there's a little typo. So I'll fix that and then run this. Okay, I need to add an S here. Okay, great. So now, just to show you what this is doing, the groupby method has grouped the entire dataframe by the different categories that were in the cylinder field, which the cylinder field only had the values of four, six, and eight. So the dataframe is now grouped according to those values. And then for each numeric field within this dataframe, mean value was generated for each grouping. So to make this a little more relatable, let me just explain how. Here, you can see, okay, for our four-cylinder group, the average, the mean miles per gallon is 26.6. And then for our six-cylinder cars, our miles per gallon, the average miles per gallon for six cylinders cars is 19.7. And then for eight-cylinder cars, the average mile per gallon is 15.1. As you can see, as the cylinders increase the average mile per gallon that the cars gets decreases. And that is how you group data by column index.


The video on “Grouping and Aggregation” provides valuable insights into handling and analyzing subsets of data within a larger dataset. Here are the key takeaways:

Understanding Grouping: Grouping data is a powerful method to explore and understand your dataset's inherent subgroups. It allows you to organize your data by specific categories, making it easier to compare subsets and understand why they might differ. For example, if you're analyzing sales data by product type, grouping can help you compare sales performance across different product categories.

Implementing Aggregation: Aggregation involves summarizing grouped data to extract meaningful information. This could include calculating averages, sums, or other statistical measures for each group. In the video, the instructor demonstrates how to use Python's pandas library to group a dataset by a specific column (like 'cylinder' in a car dataset) and then calculate the mean for numeric columns within each group. This technique is crucial for data analysis, helping you derive insights from grouped data, such as understanding the average sales per product category.

Practical Application with Python: The video provides a hands-on example using the groupby method in pandas, showcasing how to group data and perform aggregation operations like calculating the mean. This practical demonstration not only reinforces the concepts of grouping and aggregation but also equips you with the skills to apply these techniques to your own data science and machine learning projects.


These concepts are fundamental in data science and machine learning, especially for tasks like exploratory data analysis, where understanding the characteristics of different subgroups within your data is essential. Given your career goal of pivoting to a Machine Learning Engineer and your background in software engineering, mastering these techniques will be invaluable for analyzing and preparing data for machine learning models.

