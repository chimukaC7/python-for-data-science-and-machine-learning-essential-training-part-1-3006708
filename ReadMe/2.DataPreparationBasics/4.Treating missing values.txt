Treating missing values
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Now we're going to talk about comparison operators and scalar values. Just in case you don't know what a scalar value is, it's basically just a single numerical value. You can use comparison operators like greater than or less than to return true or false values for all records to indicate how each element compares to a scalar value. In Python, by default, missing values are represented with a symbol, NaN, which stands for not a number. Be warned, if your data set has zeros, 99s, or 999s, be sure to either drop or approximate them as you would with missing values. Let me give you an example of where treating missing values is useful. Imagine you work in a marketing department of a local car dealership. You've been tasked with summarizing recent results from a customer satisfaction survey. You get this data set and you can see that most of the records have been completed, but Sally and Jim didn't respond with information about their opinion of quality of work. You can see that here with the missing values. Nonetheless, Sally and Jim have responded to 75% of their request for information, so we wouldn't want to drop them from the survey altogether. That said, the other respondents, Rod, Sam, and Jane, did give information about what they thought of the quality of work. So we wouldn't want to drop this variable altogether either. What could we do? Well, we could take the average value of the responses we do have, which would be an average of eight, nine, and 10, and then just fill in these missing values, in order to generate an approximation that gives your boss a pretty good idea of the customer's actual responses. You'll see later in the coding demonstration, why it's important to try and use approximation, rather than just dropping missing values altogether. In the coding demonstration that's coming up, I'm going to show you how to work with missing values in Python. You're going to learn how to discover what's missing, fill in for those missing values, count up missing values, and also filter them out. Let's go ahead and look at how to work with missing data and Pandas. So as you can see, this notebook is coming preloaded with our NumPy and Pandas libraries. We just need to run that. And when working in data science, there are going to be situations that arise all the time where you encounter missing values. Sometimes it's caused by data entry errors, other times by machine function, but really, we have a variety of ways to handle missing values and data. And I wanted to show you those. But before I do that, I need to create a dataset that we can work with. So let's just call that dataset data, and we'll create a dataset about a group of people that go by the names, Steve, John, Richard, Sarah, Randy, Michael, and lastly, Julie. And within this dataset, we're going to describe their age, gender, and rank. So we'll set the age equal to 20 for the first person, 22, 20, 21, 24, 23, and 22. As far as the gender, I'm just going to copy and paste these over. Okay, and then let's assign them a rank for each of these people. So we'll just say two, one, four, five, three, seven and six. Okay, so now we have a dataset and everything seems to work fine here, so what I want to do is I want to use the data frame constructor to create a ranking data frame object. So I'll call it ranking_df. And then we'll call the data frame constructor, and we'll pass in our dataset here. And then off of that, let's call the iloc method. So we'll say ranking_df.iloc, and then let's pick the rows in index position two through five. And then let's also select the column in index position one. And we'll set all of these values equal to a missing value. So to do that, we will just call np.nan, and that will set the values equal to missing value. And then let's do the same thing for rows at index position three through six and column at index position three. And then lastly, let's do that for row at index position three and then all of the columns. So we can just use a colon operator here, and then we can leave the start and end value undefined, and that will set all of the columns equal to missing values. And then let's just print this out and see what we get. And as you can see, now, we have a data frame and it's got missing values for Richard, for all of row at index position three. And at the other locations that we defined in our iloc indexer above. The Pandas has several different functions that are available to us for handling missing values. The first step for handling missing values is to detect if there are any missing values present in the dataset. In order to do that, in the data frame, Pandas provides us two functions, isnull and notnull. The isnull function returns true for those values which are missing values in a data frame, and the notnull function returns true for the values which are not missing. So let's try both of those out. Let's call our ranking data frame object, and then we will call the isnull function. And when we print it out, we see that we get returned a Boolean data frame where true represents missing values and false represent the values which are not missing. Now, let's also try the notnull function. So we'll say ranking_data frame, and then call the notnull function. And then when we print this, you see that it's absolutely the opposite of the isnull method. So we are getting back true values where the value is not missing, and then where there are missing values, we should be getting back false, which as you can see, we do here. Next, I want to show you how to apply Boolean masking to show only the rows where there is a missing value in a specific column. To do that, first, we need to find the Boolean mask of the column age with the isnull function, and then we'll pass this Boolean mask into the data frame. So let's call this whole thing bool_series, and then we'll set it equal to pd.isnull, and within this function, we will pass our ranking data frame, and we are going to select the age column here. Next, let's pass the Boolean mask into the data frame. So to do that, we will just call our data frame object, and then we'll pass in the Boolean series object, and then print this out. Now, you can see that we have only returned the rows where the age is missing. So if the age value was not missing in the original dataset, then those rows did not get returned. We should also look at how to fill in missing values using the fill NA function, the replace function in the interpolate function. How these data frame functions work is that they replace missing values with some value of their own. So all of these functions help in filling missing values within a dataset. The interpolate function is used to fill missing values in the data frame, but it uses various interpolation techniques to find the missing values, rather than hard coding the value. Let's start out first by filling a missing value with a single value. Let's call our ranking_df object, and then we'll call the fillna function, and we will pass zero. As you can see, all of the missing values in the data frame have been replaced with a zero. Looking at another example, let's fill missing values with the values that comes prior to the missing value within the data frame. It's a little tricky for me to explain, so I just need to show you. We'll use the fillna function with the data frame. So we'll say ranking_df.fillna, and if we pass the method pad here, and print this out. What you can see is that all the missing values in the data frame have been replaced with the value that came prior to the missing value. So as you recall, all of the values in the row at index position three were previously missing values. And now, all of these values have been replaced by the values that were in row at index position two. Can see what I mean here. So that's how the fillna function works. Another example is to fill missing values with the next value, which is not missing in the data frame. So it would be the opposite approach to filling the missing value. To make this change, we can still use the fillna function, but we just need to change the method to be fill for backfill. We'll print this out. And then as you can see here, now, the row at index position three has been filled with the values that came after it in the original data frame, it came back up here. You can see that we had Randy, NaN, male. Now interestingly, we had NaN here. So all of these NaN missing values were backfilled with the one prior, which would be six. So that's why all of these values are now six. They have been backfilled from the value that was not missing that came after them. Let's also look at filling missing values in a data frame using the interpolate function with a linear method. The linear method ignores the index and treats the values as equally spaced. So let's just call our ranking data frame object, called the interpolate function. And here, we'll say that the method is equal to linear, and run that. So now you can see that for each of the missing values that was numerical here, it has been filled with a linear interpolation. So as you recall, if we go back up to the original data frame, we had here in our rank column, we had numbers which were not a number, and they ranged between four and six, and there were three of them, right? So if we were to make a linear interpolation, between the values of four and six, then we would come up with these values. And so that's exactly what this method did, is it interpolated between the value that came before the missing numbers and the value that came after the missing numbers, column-wise. We can also drop all of the rows and columns that contain missing value use using the dropna function. So if we call the dropna function off of the ranking data frame object, and run this, see that all the rows and columns containing at least one missing were all dropped from the data frame, and all we're getting back are the rows and columns which have no missing values whatsoever. Now, let's try to drop all the rows and columns, which only contain missing and values, using the dropna function with the keyword, how equal to all, and see how that changes things. So we'll say how, we'll set that equal to all, and we'll run this. And now you can see that all the rows and columns that contain only missing values have been dropped. So for example, the row at index position three was all missing values, and now you can see it's been dropped. Let's also drop all the columns, which contain at least one missing value. We can use the dropna function to do that as well. And then what we would need to do here though is that instead of using how equals all, we would say access equal to one. And you can see that each column had a missing value. So what we're doing here with the access equal to one is we are telling the dropna function that we wanted to look in all of the columns. And for all of the columns that contain a missing value, then that column needs to be dropped from the data frame. And when we run this, you can see that we get returned no columns. That is because all of the columns had a missing value in them in the original data frame. So we can go back here to the original data frame and look, and there is not a column without a missing value, specifically because of this row at index position three. So all of the columns have been dropped. Now, if we wanted to drop all of the rows that contain a missing value, we can use the same function, and then we would just change the access here to zero, and run this. And now you can see, okay, we back only the rows that have no missing values. For real, had a missing value, then it got dropped. And that is how to work with missing values using Pandas.


The video on “Treating missing values” covers essential techniques for handling missing data in Python using the Pandas library, a common challenge in data science and machine learning projects. Here's a breakdown of the key concepts:

Identifying Missing Values: Missing values in datasets can distort your analysis. In Python, they're typically represented as NaN (Not a Number). Pandas provides functions like isnull() and notnull() to detect these missing values. For example, dataframe.isnull() returns a Boolean mask indicating where the missing values are.

Filling Missing Values: Instead of discarding missing data, you can fill in these gaps. The fillna() method allows you to replace missing values with a specific value, like zero, or use methods like 'pad' (forward fill) or 'backfill' to fill missing values with the next or previous non-missing value, respectively. Another approach is interpolation (interpolate()), which estimates missing values based on surrounding data points.

Dropping Missing Values: Sometimes, it's more practical to remove rows or columns with missing data, especially if filling them doesn't make sense. The dropna() method can be used to drop any row or column with missing values. You can specify conditions, like dropping rows or columns only if all their values are missing.


Understanding how to effectively handle missing data is crucial for preparing your dataset for analysis or machine learning models. These techniques allow you to clean and preprocess your data, ensuring more accurate and reliable results. Given your background and goals, mastering these methods will be invaluable as you pivot towards a machine learning engineer role, where data quality significantly impacts model performance.