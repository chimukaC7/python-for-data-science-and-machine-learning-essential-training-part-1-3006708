- [Instructor] Now it's time to talk about the requests library. Requests is a Python library which is used to make all sorts of HTTP requests. It's a human friendly HTTP library. Requests Library provides a lot of customizable features that can be used for all sorts of different types of tasks. And in this coding demonstration we're going to work on next, I will teach you how to make requests using HTTP methods and how connections are established. We'll also look at to use requests to get response headers, content types, and response content. So let's get started. Let's start this demonstration by importing the required libraries. So in this case, it's going to be the requests library. We'll say import_requests. Run this. And one of the most common HTTP methods is get. the get method gets or retrieves data from a specific resource. Let's make a get request using the requests library and check its response. So we'll say response is equal to requests.get and then we'll pass in the URL https://www.python.org to retrieve data from the original Python website's URL. Looks like I missed a Y here, so I'll add that. And then print this. This needs to be a string. So let me add single quote around each side of the string here. And then we run it. And when we run this code, we see that it returned a Response (200). This 200 response means that the connection with the website was successful. Now let's dive a little deeper into the response of that request. When we make a request to a server like this, it returns extra information with a response called headers. Headers contain all of the metadata of the URL for which we made the request of the server. Let's print the response header. So we'll say response.headers and run this. And what you see is all of the headers information that is returned in the response. Goes on quite a ways here. Yeah, there's quite a bit of information. One type of information that's returned in headers is the content type. Content type indicates the media type of the returned content. For example, if the returned content is a simple HTML page, then its content type will be text/html. Similarly, if the returned content is a PDF file, then its content type will be application/pdf. Let's check the content type of the response object. So we'll say response.headers and then we want to look here at the content type, Content-Type and run this. And now we see that the content type of the response object is text/html which indicates that the returned content is a simple HTML page. In general, we use Python request to fetch content from a server. Response content is the information about the server's response that's delivered back to us when we send a request. If we want to return the content of the response in bytes, we'd say response.content like this. response.content And what you're seeing here is that we have returned all of the content of the response in bytes. Now let's compare sequences in lines of text. To do that, we will need to import the diflib module. So we will say import_diflib and run that. Now let's create two sequences that we can compare. The first will be called flines and we'll set that equal to a string that reads, Hello. How are you? I am fine. And then the second sequence will be an object called glines, and that will be equal to a string that reads, How are you, Lillian? I am doing well. Okay, so simple. I'll put a period here at the end just for good grammar, at the end of the word fine. And run this. And next we need to create a differ object, which we can use to compare the sequences of text and find differences between them. We'll call this differ object d. We'll set it equal to diflib.Differ class, and to compare the sequences, we need to call the compare method off of the d object. Let's call this whole thing diff and we'll set diff equal to d.compare. And then we want to compare our flines against our glines. So we'll pass those names in. Then we need to iterate over the sequence and print out the differences. One problem here though, before moving forward, I see a typo. I have a stray dot here, so let me get rid of that. And then iterating over sequences to print out the difference. To do that, we're going to use a for loop that iterates over the generator that's returned by compare. So we will say for line in diff print(line) We'll call the print function and we'll just have it print out the line. I need to add a colon here. And then I'll run this. Okay, it looks like I have a typo. Ah, okay, so I called it fline. I forgot an S when I was creating these objects. So I'll just add an S here. So F line is equal to, "Hello, how are you? I'm fine." And then rerun this code block. And there we go. We have our output. And let's take a look at what this actually means. First off, what you're seeing here is that each iteration has yielded a line that has been compared and printed to the console. The lines from the generator can include information such as which elements are present in one sequence, but not the other, which are common to both, and which are present in the second sequence, but not the first. On the bottom here you can see a notification that the output is truncated and we can view it as a scrollable element by clicking on this link here, which I'll do now. And then let's examine these results. Now, if you look closely, we can see that the elements that are present in the first string, but not in the second string, are marked with a negative sign. So for example, this word hello. Let's look back. Hello is in the first line, but it's not in the second line. Hello is in flines, but it's not in glines. And that difference is indicated with a negative symbol here. For elements that are present in both strings, they're given no symbol or just a blank space. So for example, the word how. How exists in both flines and glines. So it's assigned the symbol of a blank space in the output. And for elements that are in the second string, but not the first, you could probably guess this, but those are indicated by a positive sign. So for example, here the word Lillian has plus signs. And as you can see, the word Lillian is in the glines variable, but it's not in the flines variable. That's why it's been assigned a plus sign as an indicator. That's the basics of what you need to know about Python requests. Now let's look at the beautiful soup object.


Here are the key takeaways from the “Python requests for automating data collection” video:

Requests Library: The requests library in Python is used to make HTTP requests, which can retrieve data from web resources.
HTTP Methods: The video demonstrates how to use the get method to fetch data from a URL, such as https://www.python.org.
Response Handling: It covers how to handle the response, including checking response headers and content types, and how to extract the response content in bytes.

If you have any specific questions or need further clarification on any of these points, feel free to ask!